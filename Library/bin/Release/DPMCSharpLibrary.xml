<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DPM</name>
    </assembly>
    <members>
        <member name="T:DigitalProduction.Algorithms.Algorithms">
            <summary>
            A collection of general purpose algorithms.
            </summary>
        </member>
        <member name="M:DigitalProduction.Algorithms.Algorithms.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Algorithms.Algorithms.Shuffle(System.Collections.ArrayList@)">
            <summary>
            Randomize an array list.  Uses .Net framework "Random" object to generate random numbers.
            Written May 2004.
            </summary>
            <param name="list">Array to be shuffled.</param>
        </member>
        <member name="T:DigitalProduction.ComponentModel.AliasAttribute">
            <summary>
            Attribute for applying alternate names to a class.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.AliasAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.AliasAttribute.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:DigitalProduction.ComponentModel.AliasAttribute.Alias">
            <summary>
            An alternate name for the class/structure.
            </summary>
        </member>
        <member name="T:DigitalProduction.Extensions.ListExtensions">
            <summary>
            Statistical extensions for a list.
            Based upon: http://www.martijnkooij.nl/2013/04/csharp-math-mean-variance-and-standard-deviation/
            </summary>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Mean(System.Collections.Generic.List{System.Double})">
            <summary>
            Get the mean (average) of a list.
            </summary>
            <param name="values">List to calculate the mean (average) from.</param>
            <returns>Mean (average) of data.</returns>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Mean(System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Get the mean (average) of a subset of list entries.
            </summary>
            <param name="values">List to calculate the mean (average) from.</param>
            <param name="start">Index to start from.</param>
            <param name="count">Number of entries to take the mean (average) of.</param>
            <returns>Mean (average) of data.</returns>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.RemoveMean(System.Collections.Generic.List{System.Double})">
            <summary>
            Removes the mean (subtracts) from a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.RemoveMean(System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Removes the mean (subtracts) from a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="start">Starting index.</param>
            <param name="end">Ending index (not included in calculation).</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Variance(System.Collections.Generic.List{System.Double})">
            <summary>
            Calculates the variance of a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Variance(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Calculates the variance of a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="mean">The mean (average) value of the entries.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.Variance(System.Collections.Generic.List{System.Double},System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the variance of a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="mean">The mean (average) value of the entries.</param>
            <param name="start">Starting index.</param>
            <param name="end">Ending index (not included in calculation).</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.StandardDeviation(System.Collections.Generic.List{System.Double})">
            <summary>
            Calculates the standard deviation of a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.StandardDeviation(System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Calculates the standard deviation of a subset of a list of doubles.
            </summary>
            <param name="values">Values for calculation (this list).</param>
            <param name="start">Starting index.</param>
            <param name="end">Ending index (not included in calculation).</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.MovingAverage(System.Collections.Generic.List{System.Double},System.Int32)">
            <summary>
            Calculates a moving average.  This is a "backward" moving average.  A data point in the moving average is the
            average of the previous "windowLength" points from the input data.  This is different from a "central" or
            "forward" moving average.
            </summary>
            <param name="values">Values to average.</param>
            <param name="windowLength">Window size for the average.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.SegmentAverage(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Calculate the average for each segment.
            </summary>
            <param name="values">Values to take average of.</param>
            <param name="segmentIndices">Indices of the segments.</param>
            <param name="forPlotting">If true, the additional values are added (values are added twice) so that a continuous line can be plotted.</param>
        </member>
        <member name="M:DigitalProduction.Extensions.ListExtensions.MultiplyInPlace(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Fast version of multiply by a scalar.  Does multiplication of values in list "in place," meaning
            the values in the list are overwritten.
            </summary>
            <param name="values">List to multiple the values of.  Values in list are overwritten.</param>
            <param name="scalar">Scalar to multiply by.</param>
        </member>
        <member name="T:DigitalProduction.Forms.AbstractControlDescriptionProvider`2">
            <summary>
            Provides a way for the designer to work with abstract base classes.
            
            To use, preface the class declaration with:
            [TypeDescriptionProvider(typeof(AbstractControlDescriptionProvider&lt;TAbstract, TBase&gt;))]
            
            http://stackoverflow.com/questions/1620847/how-can-i-get-visual-studio-2008-windows-forms-designer-to-render-a-form-that-im/2406058#2406058
            </summary>
            <typeparam name="TAbstract">Abstract class.</typeparam>
            <typeparam name="TBase">Base class.</typeparam>
        </member>
        <member name="M:DigitalProduction.Forms.AbstractControlDescriptionProvider`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.AbstractControlDescriptionProvider`2.GetReflectionType(System.Type,System.Object)">
            <summary>
            Tell anyone who reflects on us that the concrete form is the form to reflect against, not the abstract form. This way, the
            designer does not see an abstract class. 
            </summary>
            <param name="objectType">Object type.</param>
            <param name="instance">Instance.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.AbstractControlDescriptionProvider`2.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
            <summary>
            If the designer tries to create an instance of AbstractForm, we override it here to create a concrete form instead.
            </summary>
            <param name="provider">Service provider.</param>
            <param name="objectType">Object type.</param>
            <param name="argTypes">Argument Types.</param>
            <param name="args">Arguments.</param>
            <returns>New instance.</returns>
        </member>
        <member name="T:DigitalProduction.IO.DriveType">
            <summary>
            Drive types for computer.
            
            The "Description" attribute can be accessed using Reflection to get a string representing the enumeration type.
            
            The "Length" enumeration can be used in loops as a convenient way of terminating a loop that does not have to be changed if
            the number of items in the enumeration changes.  The "Length" enumeration must be the last item.
            for (int i = 0; i &lt; (int)EnumType.Length; i++) {...}
            </summary>
        </member>
        <member name="F:DigitalProduction.IO.DriveType.NotFound">
            <summary>Unknown.</summary>
        </member>
        <member name="F:DigitalProduction.IO.DriveType.Removable">
            <summary>Removable drive.</summary>
        </member>
        <member name="F:DigitalProduction.IO.DriveType.Fixed">
            <summary>Fixed drive.</summary>
        </member>
        <member name="F:DigitalProduction.IO.DriveType.RemoteDisk">
            <summary>Remote drive.</summary>
        </member>
        <member name="F:DigitalProduction.IO.DriveType.CD">
            <summary>CD or DVD drive.</summary>
        </member>
        <member name="F:DigitalProduction.IO.DriveType.RamDisk">
            <summary>Ramdisk.</summary>
        </member>
        <member name="T:DigitalProduction.IO.ValidFileNameResult">
            <summary>
            Enumeration that specifies the result of checking a file name for validity.
            
            The "Description" attribute can be accessed using Reflection to get a string representing the enumeration type.
            
            The "Length" enumeration can be used in loops as a convenient way of terminating a loop that does not have to be changed if
            the number of items in the enumeration changes.  The "Length" enumeration must be the last item.
            for (int i = 0; i &lt; (int)EnumType.Length; i++) {...}
            </summary>
        </member>
        <member name="F:DigitalProduction.IO.ValidFileNameResult.Valid">
            <summary>File name is valid.</summary>
        </member>
        <member name="F:DigitalProduction.IO.ValidFileNameResult.ZeroLength">
            <summary>A string of zero lenth (or all spaces) was specified.</summary>
        </member>
        <member name="F:DigitalProduction.IO.ValidFileNameResult.TooLong">
            <summary>File name is too long.</summary>
        </member>
        <member name="F:DigitalProduction.IO.ValidFileNameResult.InvalidCharacters">
            <summary>Characters not allowed by the system were used.</summary>
        </member>
        <member name="F:DigitalProduction.IO.ValidFileNameResult.PathDoesNotExist">
            <summary>Path does not exist.</summary>
        </member>
        <member name="F:DigitalProduction.IO.ValidFileNameResult.FileNameNotProvided">
            <summary>File name was not provided / file name starts with a "dot."</summary>
        </member>
        <member name="F:DigitalProduction.IO.ValidFileNameResult.DeviceName">
            <summary>The first few characters must not match any known device names.</summary>
        </member>
        <member name="T:DigitalProduction.Numerics.Precision">
            <summary>
            A set of methods related to the use of finite precision numbers.
            </summary>
        </member>
        <member name="T:DigitalProduction.Numerics.PrecisionSettings">
            <summary>
            Settings used for methods related to finite precision calculations.
            </summary>
        </member>
        <member name="M:DigitalProduction.Numerics.PrecisionSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:DigitalProduction.Numerics.PrecisionSettings.DoubleZeroThreshold">
            <summary>
            Threshold for determining if a double value is zero.
            </summary>
        </member>
        <member name="P:DigitalProduction.Numerics.PrecisionSettings.FloatZeroThreshold">
            <summary>
            Threshold for determining if a float value is zero.
            </summary>
        </member>
        <member name="T:DigitalProduction.ComponentModel.RevertibleList`1">
            <summary>
            Provides and interface for an list of objects that are revertible.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.RevertibleList`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.RevertibleList`1.BeginEdit">
            <summary>
            Beginning of the edit.  Current state should be saved.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.RevertibleList`1.RejectChanges">
            <summary>
            Reject the changes made since the last BeginEdit.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.RevertibleList`1.AcceptChanges">
            <summary>
            Accept (commit) the changes made since the last BeginEdit.
            </summary>
        </member>
        <member name="T:DigitalProduction.ComponentModel.IRevertible">
            <summary>
            Provides and interface for an object that is revertible.  The object can save its current state and after changes are made to it, either keep
            the changes or revert to the saved state.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.IRevertible.BeginEdit">
            <summary>
            Beginning of the edit.  Current state should be saved.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.IRevertible.RejectChanges">
            <summary>
            Reject the changes made since the last BeginEdit.
            </summary>
        </member>
        <member name="M:DigitalProduction.ComponentModel.IRevertible.AcceptChanges">
            <summary>
            Accept (commit) the changes made since the last BeginEdit.
            </summary>
        </member>
        <member name="T:DigitalProduction.DataBase.DataBaseAccess">
            <summary>
            Summary description for DataBaseAccess.
            </summary>
        </member>
        <member name="F:DigitalProduction.DataBase.DataBaseAccess._dataadapter">
            <summary>Data adapter.</summary>
        </member>
        <member name="F:DigitalProduction.DataBase.DataBaseAccess.DataSet">
            <summary>Data set.</summary>
        </member>
        <member name="M:DigitalProduction.DataBase.DataBaseAccess.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="DataBaseLocation">Location of database to connect to.</param>
            <param name="Table">Table in the database to connect to.</param>
        </member>
        <member name="M:DigitalProduction.DataBase.DataBaseAccess.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DigitalProduction.DataBase.DataBaseAccess.GetDataConnection">
            <summary>
            Creates a connection to a table and fills the dataset.
            </summary>
            <returns>True if connection succeeded, false otherwise.</returns>
        </member>
        <member name="M:DigitalProduction.DataBase.DataBaseAccess.GetTableNames(System.String)">
            <summary>
            Get the names of the tables in the database.
            </summary>
            <param name="databasepath">Path to database.</param>
            <returns>An array of strings with the names of the tables.</returns>
        </member>
        <member name="T:DigitalProduction.Drawing.DPMGraphics">
            <summary>
            Summary description for DPMGraphics.
            </summary>
        </member>
        <member name="M:DigitalProduction.Drawing.DPMGraphics.#ctor(System.Drawing.Graphics)">
            <summary>
            Construtor.
            </summary>
            <param name="graphics">Graphics object to draw on.</param>
        </member>
        <member name="M:DigitalProduction.Drawing.DPMGraphics.#ctor(System.Drawing.Graphics,System.Drawing.Font)">
            <summary>
            Construtor.
            </summary>
            <param name="graphics">Graphics object to draw on.</param>
            <param name="font">Font to use when drawing.</param>
        </member>
        <member name="M:DigitalProduction.Drawing.DPMGraphics.#ctor(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Brush)">
            <summary>
            Construtor.
            </summary>
            <param name="graphics">Graphics object to draw on.</param>
            <param name="font">Font to use when drawing.</param>
            <param name="brush">Brush to use when drawing.</param>
        </member>
        <member name="M:DigitalProduction.Drawing.DPMGraphics.DrawStringCenteredX(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Draw a string of text center horizontally between xstart and xstart+xwidth.
            </summary>
            <param name="text">Text to draw.</param>
            <param name="xstart">Starting x position of area to center text in.</param>
            <param name="xwidth">Width of area to center text in.</param>
            <param name="y">Y position on graphics to draw text.</param>
        </member>
        <member name="M:DigitalProduction.Drawing.DPMGraphics.DrawStringRotated(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Draw a string of text at position x,y rotated angle degrees clockwise.
            </summary>
            <param name="text">Text to draw.</param>
            <param name="angle">Angle, in degrees, to rotate text in clockwise direction.</param>
            <param name="x">X position on graphics to draw text.</param>
            <param name="y">Y position on graphics to draw text.</param>
        </member>
        <member name="M:DigitalProduction.Drawing.DPMGraphics.DrawStringRotatedCenteredX(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a string of text rotated angle degrees clockwise and centered between x and x+width in the new
            rotated frame.
            </summary>
            <param name="text">Text to draw.</param>
            <param name="angle">Angle, in degrees, to rotate text in clockwise direction.</param>
            <param name="x">X position on graphics to draw text.</param>
            <param name="y">Y position on graphics to draw text.</param>
            <param name="width">Width of area to center text in.</param>
        </member>
        <member name="P:DigitalProduction.Drawing.DPMGraphics.Graphics">
            <value>
            Graphics to draw on.
            </value>
        </member>
        <member name="P:DigitalProduction.Drawing.DPMGraphics.Font">
            <value>
            Font to use when drawing.
            </value>
        </member>
        <member name="P:DigitalProduction.Drawing.DPMGraphics.Brush">
            <value>
            Brush to use when drawing.
            </value>
        </member>
        <member name="T:DigitalProduction.Drawing.DPMText">
            <summary>
            Summary description for DPMText.
            </summary>
        </member>
        <member name="M:DigitalProduction.Drawing.DPMText.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Drawing.DPMText.CenterTextHorizontally(System.Drawing.Graphics,System.Drawing.Font,System.String,System.Single,System.Single)">
            <summary>
            Calculate the new x position needed to horizontally in the space between xstart and xstart+width.
            </summary>
            <param name="graphics">Graphics object text is going to be drawn on.</param>
            <param name="font">Font used to draw text.</param>
            <param name="text">Text to center.</param>
            <param name="xstart">X position text starts at.</param>
            <param name="width">Width of area to center text in.</param>
            <returns></returns>
        </member>
        <member name="T:DigitalProduction.Forms.AboutForm1">
            <summary>
            A simple "about" dialog box.
            
            Extracts information from the assembly to population the labels.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.AboutForm1.#ctor(System.String)">
            <summary>
            Constructor with contact email.
            </summary>
            <param name="contactemail">Contact email address.</param>
        </member>
        <member name="M:DigitalProduction.Forms.AboutForm1.#ctor(System.String,System.String)">
            <summary>
            Constructor for replacing the default image.
            </summary>
            <param name="contactemail">Contact email address.</param>
            <param name="imageresourcename">An image to replace default.  Image is located as a resource.</param>
        </member>
        <member name="M:DigitalProduction.Forms.AboutForm1.Dispose(System.Boolean)">
            <summary>
            Dispose of form.
            </summary>
            <param name="disposing">Disposing of form.</param>
        </member>
        <member name="T:DigitalProduction.Forms.ExtendedDataGridView">
            <summary>
            A DataGridView with copy and pasting of cells enabled.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.InitializeComponent">
            <summary>
            Initialize controls.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.ContextMenuStrip_Opening(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Context menu opening.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event handlers.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.dataGridView1_CellMouseClick(System.Object,System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            Mouse click in a cell handlers.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event handlers.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.ExtendedDataGridView_DataError(System.Object,System.Windows.Forms.DataGridViewDataErrorEventArgs)">
            <summary>
            Handle data entry error.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event handlers.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.mnuCut_Click(System.Object,System.EventArgs)">
            <summary>
            Cut event handler.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event handlers.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.mnuCopy_Click(System.Object,System.EventArgs)">
            <summary>
            Copy event handler.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event handlers.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.mnuPaste_Click(System.Object,System.EventArgs)">
            <summary>
            Paste event handler.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.mnuDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Delete event handler.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.mnuInsert_Click(System.Object,System.EventArgs)">
            <summary>
            Insert event handler.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.DataGridViewWithCopyPaste_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Keyboard events.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.SetContextMenuState">
            <summary>
            Setup the contrext menu.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.Cut">
            <summary>
            Copies the contents to the clipboard, then erases the data.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.Copy">
            <summary>
            Copies the data to the clipboard.  Performs a check to make sure the data exists before copying.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.Paste">
            <summary>
            Paste data to the cells.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.Delete">
            <summary>
            Removes the contents of the cells and sets them to the default values.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.Insert">
            <summary>
            Inserts a new row.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.GetStartCell">
            <summary>
            Find the starting cell (lowest row and column) of the selected cells.
            </summary>
            <returns>The DataGridViewCell with the lowerst row and column number of the selected cells.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.ClipBoardValues(System.String)">
            <summary>
            Parses a clipboard string and returns the values in the string in a Dictionary.
            </summary>
            <param name="clipboardstring">Clipboard string to parse.</param>
            <returns>Values in the clipboard string in a Dictionary.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.ExtendedDataGridView.WriteAsImage(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Write the control to the disk as an image.
            </summary>
            <param name="path">Path to write the image to.</param>
            <param name="format">Format to write the image in.</param>
        </member>
        <member name="E:DigitalProduction.Forms.ExtendedDataGridView.Insertion">
            <summary>
            Insert event.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.ExtendedDataGridView.ContextMenuEnabled">
            <summary>
            Specifies if the context menu for copy/cut/paste is enabled.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.ExtendedDataGridView.InsertDelegate">
            <summary>
            Template for function which performs insertion of new row of data.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.DPMProgressableForm">
            <summary>
            Form with a progress bar.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.DPMForm">
            <summary>
            DPMForm Class.  this is the base class for all Digital Production Management forms.  It contains
            the common code for all applications (e.g. company name).
            
            The event "Install" is provided to allow all class to chain installation call back functions to it
            so that each class can define it's installation requirements.  This is primarily used for debugging
            purposes, a setup routine should handle the installation of things normally so that they can be
            removed with an un-installation routine.
            
            If this form is the child of another the name of the form is held in _appname;
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMForm.#ctor">
            <summary>
            Constructor required for form designer.  Do not use this constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMForm.#ctor(System.String)">
            <summary>
            Constructor applications should use.
            </summary>
            <param name="applicationname">Name of the application (used as registry name also).</param>
        </member>
        <member name="M:DigitalProduction.Forms.DPMForm.#ctor(System.String,System.String)">
            <summary>
            Constructor top level applications should use if the application is for a different company
            other than the default.
            </summary>
            <param name="companyname">Name of the company (used as registry top level name).</param>
            <param name="applicationname">Name of the application (used as registry name also).</param>
        </member>
        <member name="M:DigitalProduction.Forms.DPMForm.#ctor(DigitalProduction.Forms.DPMForm,System.String)">
            <summary>
            Constructor dialog boxes put up by a parent dialog box (such as the application) should use.
            </summary>
            <param name="owner">Form that owns this form.</param>
            <param name="dialogname">Name of this form (used as registry name also).</param>
        </member>
        <member name="M:DigitalProduction.Forms.DPMForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMForm.RunInstall">
            <summary>
            Trigger the installation event.  Primarily used to simplify debugging.
            </summary>
        </member>
        <member name="E:DigitalProduction.Forms.DPMForm.Install">
            <summary>
            Install event.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.DPMForm.DPMCompanyName">
            <summary>
            Get the name of the company.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.DPMForm.AppName">
            <summary>
            Get the name of the application.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.DPMForm.IsChildForm">
            <summary>
            Returns true if the form is the child of another.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.DPMForm.OwnerDPM">
            <summary>
            Returns the owner of this form if it is a child of another form.  Otherwise null is returned.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.DPMForm.InstallDelegate">
            <summary>
            Template for install functions.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.DPMProgressableForm._progresscallback">
            <summary>
            Progress callback function.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="applicationname">Name of application.</param>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="companyname">Company name.</param>
            <param name="applicationname">Name of application.</param>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.DisplayMessage(System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Display a message.
            </summary>
            <param name="message">Message to display</param>
            <param name="icon">Icon to display with the message.</param>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.InvokeMessage(System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            For displaying a message when an invoke is required.
            </summary>
            <param name="message">Message to display</param>
            <param name="icon">Icon to display with the message.</param>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.ReportProgress(System.Int32)">
            <summary>
            Update the progress bar.
            </summary>
            <param name="progress">Progress to report.</param>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.StartProcessThread">
            <summary>
            Start the processing thread.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.HandleCancel">
            <summary>
            Cancel handling.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.DoProcessing">
            <summary>
            Run the pocessing.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.ProcessingCleanUp">
            <summary>
            Processing clean up.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.DPMProgressableForm.ExceptionCleanUp">
            <summary>
            Exception clean up.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.DPMProgressableForm.DisplayMessageCallBack">
            <summary>
            Delegate for displaying a message.
            </summary>
            <param name="message">Message to display</param>
            <param name="icon">Icon to display with the message.</param>
        </member>
        <member name="T:DigitalProduction.Forms.FileSelect">
            <summary>
            Summary not provided for the class FileSelect.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForAnXMLFile(System.Windows.Forms.IWin32Window)">
            <summary>
            Use an OpenFileDialog box to get the location of an XML file.  Starting directory is the current
            working directory and the title of the dialog box is "Open."
            </summary>
            <param name="owner">Owner window.</param>
            <returns>The new file selected, or "" if a valid file is not selected.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForAnXMLFile(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Use an OpenFileDialog box to get the location of an XML file.  Starting directory is the current
            working directory.
            </summary>
            <param name="owner">Owner window.</param>
            <param name="title">Title of the OpenFileDialog box.</param>
            <returns>The new file selected, or "" if a valid file is not selected.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForAnXMLFile(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Use an OpenFileDialog box to get the location of an XML file.
            </summary>
            <param name="owner">Owner window.</param>
            <param name="title">Title of the OpenFileDialog box.</param>
            <param name="initialdirectory">Directory to start in.</param>
            <returns>The new file selected, or "" if a valid file is not selected.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForAFile(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Use an OpenFileDialog box to get the location of a file.  Starting directory is the current
            working directory and the title of the dialog box is "Open."
            </summary>
            <param name="owner">Owner window.</param>
            <param name="filter">The file name filter string, which determines the choices that appear in the "Files of type"  box in the dialog box.</param>
            <returns>The new file selected, or "" if a valid file is not selected.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForAFile(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Use an OpenFileDialog box to get the location of a file.  Starting directory is the current
            working directory.
            </summary>
            <param name="owner">Owner window.</param>
            <param name="filter">The file name filter string, which determines the choices that appear in the "Files of type"  box in the dialog box.</param>
            <param name="title">Title of the OpenFileDialog box.</param>
            <returns>The new file selected, or "" if a valid file is not selected.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForAFile(System.Windows.Forms.IWin32Window,System.String,System.String,System.String)">
            <summary>
            Use an OpenFileDialog box to get the location of a file.
            </summary>
            <param name="owner">Owner window.</param>
            <param name="filter">The file name filter string, which determines the choices that appear in the "Files of type"  box in the dialog box.</param>
            <param name="title">Title of the OpenFileDialog box.</param>
            <param name="initialdirectory">Directory to start in.</param>
            <returns>The new file selected, or "" if a valid file is not selected.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForANewXMLFileLocation(System.Windows.Forms.IWin32Window)">
            <summary>
            Use a SaveFileDialog box to get a location for a new XML file.  Starting directory is the current
            working directory and the title of the dialog box is "Save As."
            </summary>
            <param name="owner">Owner window.</param>
            <returns>The new file selected, or "" if a valid file is not selected.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForANewXMLFileLocation(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Use a SaveFileDialog box to get a location for a new XML file.  Starting directory is the current
            working directory.
            </summary>
            <param name="owner">Owner window.</param>
            <param name="title">Title of the SaveFileDialog box.</param>
            <returns>The new file selected, or "" if a valid file is not selected.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForANewXMLFileLocation(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Use a SaveFileDialog box to get a location for a new XML file.
            </summary>
            <param name="owner">Owner window.</param>
            <param name="title">Title of the SaveFileDialog box.</param>
            <param name="initialdirectory">Directory to start in.</param>
            <returns>The new file selected, or "" if a valid file is not selected.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForANewFileLocation(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Use a SaveFileDialog box to get a location for a new file.  Starting directory is the current
            working directory and the title of the dialog box is "Save As."
            </summary>
            <param name="owner">Owner window.</param>
            <param name="filter">The file name filter string, which determines the choices that appear in the "Saves as file type"  box in the dialog box.</param>
            <returns>The new file selected, or "" if a valid file is not selected.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForANewFileLocation(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Use a SaveFileDialog box to get a location for a new file.  Starting directory is the current
            working directory.
            </summary>
            <param name="owner">Owner window.</param>
            <param name="filter">The file name filter string, which determines the choices that appear in the "Saves as file type"  box in the dialog box.</param>
            <param name="title">Title of the SaveFileDialog box.</param>
            <returns>The new file selected, or "" if a valid file is not selected.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.FileSelect.BrowseForANewFileLocation(System.Windows.Forms.IWin32Window,System.String,System.String,System.String)">
            <summary>
            Use a SaveFileDialog box to get a location for a new file.
            </summary>
            <param name="owner">Owner window.</param>
            <param name="filter">The file name filter string, which determines the choices that appear in the "Saves as file type"  box in the dialog box.</param>
            <param name="title">Title of the SaveFileDialog box.</param>
            <param name="initialdirectory">Directory to start in.</param>
            <returns>The new file selected, or "" if a valid file is not selected.</returns>
        </member>
        <member name="T:System.Windows.Forms.MessageBoxManager">
            <summary>
            A class for changing the default text on a message box.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBoxManager.Register">
            <summary>
            Enables MessageBoxManager functionality
            </summary>
            <remarks>
            MessageBoxManager functionality is enabled on current thread only.
            Each thread that needs MessageBoxManager functionality has to call this method.
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.MessageBoxManager.Unregister">
            <summary>
            Disables MessageBoxManager functionality
            </summary>
            <remarks>
            Disables MessageBoxManager functionality on current thread only.
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.MessageBoxManager.OK">
            <summary>
            OK text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MessageBoxManager.Cancel">
            <summary>
            Cancel text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MessageBoxManager.Abort">
            <summary>
            Abort text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MessageBoxManager.Retry">
            <summary>
            Retry text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MessageBoxManager.Ignore">
            <summary>
            Ignore text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MessageBoxManager.Yes">
            <summary>
            Yes text.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.MessageBoxManager.No">
            <summary>
            No text.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MessageBoxManager.Button">
            <summary>
            The buttons on a message box are numbered from 1, not zero, so we start counting from 1 in this enumeration.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.MessageBoxManager.CWPRETSTRUCT">
            <summary>
            Defines the message parameters passed to a WH_CALLWNDPROCRET hook procedure,
            </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxManager.CWPRETSTRUCT.lresult">
            <summary>The return value of the window procedure that processed the message specified by the message value.</summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxManager.CWPRETSTRUCT.lparam">
            <summary>Additional information about the message. The exact meaning depends on the message value.</summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxManager.CWPRETSTRUCT.wparam">
            <summary>Additional information about the message. The exact meaning depends on the message value.</summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxManager.CWPRETSTRUCT.message">
            <summary>The message. </summary>
        </member>
        <member name="F:System.Windows.Forms.MessageBoxManager.CWPRETSTRUCT.hwnd">
            <summary>A handle to the window that processed the message specified by the message value.</summary>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxYesNoToAll">
            <summary>
            Provides a parallel form and Show methods to MessageBox but adds "Yes to All" and "No to All" options.
            
            A delegate is provided which allows the MessageBoxYesNoToAll set and get the result of the dialog call.  This allow the
            "Yes to All" and "No to All" options work by storing the value and using it for later calls.  Note, the stored value must
            be reset in order to re-display the message box.
            
            Allows for the option to return "Yes to All" as "Yes" and "No to All" as "No."  This means the calling function does not need
            to check both "Yes/No to All" and "Yes/No" to determine if it's work should be done.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll._storeresultfunction">
            <summary>
            Delegate function used to store the result of the dialog display and to access the result for the previous display.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAll.#ctor(DigitalProduction.Forms.MessageBoxYesNoToAll.StoreResultDelegate)">
            <summary>
            Constructor.
            </summary>
            <param name="storeresultfunction"></param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAll.#ctor(DigitalProduction.Forms.MessageBoxYesNoToAll.StoreResultDelegate,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="storeresultfunction"></param>
            <param name="returnonlyyesno">If true, "Yes to All" is returned as "Yes" and "No to All" is returned as "No."</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAll.Show(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Show a MessageBoxYesNoToAll dialog box and return the result.  The result is also stored for later retrieval.
            </summary>
            <param name="owner">Owner to show in front of.</param>
            <param name="text">Message to display.</param>
            <returns>Result of dialog (which button was pushed).</returns>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAll.Show(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Show a MessageBoxYesNoToAll dialog box and return the result.  The result is also stored for later retrieval.
            </summary>
            <param name="owner">Owner to show in front of.</param>
            <param name="text">Message to display.</param>
            <param name="caption">Title of message box.</param>
            <returns>Result of dialog (which button was pushed).</returns>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAll.Show(System.Windows.Forms.IWin32Window,System.String,System.String,DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons)">
            <summary>
            Show a MessageBoxYesNoToAll dialog box and return the result.  The result is also stored for later retrieval.
            </summary>
            <param name="owner">Owner to show in front of.</param>
            <param name="text">Message to display.</param>
            <param name="caption">Title of message box.</param>
            <param name="buttons">Which buttons to show.</param>
            <returns>Result of dialog (which button was pushed).</returns>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAll.Show(System.Windows.Forms.IWin32Window,System.String,System.String,DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons,DigitalProduction.Forms.MessageBoxYesNoToAll.Icon)">
            <summary>
            Show a MessageBoxYesNoToAll dialog box and return the result.  The result is also stored for later retrieval.
            </summary>
            <param name="owner">Owner to show in front of.</param>
            <param name="text">Message to display.</param>
            <param name="caption">Title of message box.</param>
            <param name="buttons">Which buttons to show.</param>
            <param name="icon">Icon to show.</param>
            <returns>Result of dialog (which button was pushed).</returns>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAll.Show(System.Windows.Forms.IWin32Window,System.String,System.String,DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons,DigitalProduction.Forms.MessageBoxYesNoToAll.Icon,DigitalProduction.Forms.MessageBoxYesNoToAll.DefaultButton)">
            <summary>
            Show a MessageBoxYesNoToAll dialog box and return the result.  The result is also stored for later retrieval.
            </summary>
            <param name="owner">Owner to show in front of.</param>
            <param name="text">Message to display.</param>
            <param name="caption">Title of message box.</param>
            <param name="buttons">Which buttons to show.</param>
            <param name="icon">Icon to show.</param>
            <param name="defaultbutton">Which button is default.</param>
            <returns>Result of dialog (which button was pushed).</returns>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAll.CheckResult(DigitalProduction.Forms.MessageBoxYesNoToAll.Result)">
            <summary>
            Performs the duty of converting "Yes to All" to "Yes" and "No to All" to "No" if that option is selected.
            </summary>
            <param name="dialogresult">Input dialog result.</param>
            <returns>Dialog result correct based on if the conversion option is selected.</returns>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxYesNoToAll.Result">
            <summary>
            Results of the dialog.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Result.Yes">
            <summary>Yes.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Result.YesToAll">
            <summary>Yes to All button was pushed.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Result.No">
            <summary>No button was pushed.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Result.NoToAll">
            <summary>No to All button was pushed.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Result.Cancel">
            <summary>Cancel button was pushed.</summary>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons">
            <summary>
            Buttons shown on the dialog.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons.YesToAllNo">
            <summary>Yes, Yes to All, No.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons.YesToAllNoCancel">
            <summary>Yes to All, No, Cancel.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons.YesNoToAll">
            <summary>Yes, No, No to All.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons.YesNoToAllCancel">
            <summary>Yes, No, No to All, Cancel.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons.YesToAllNoToAll">
            <summary>Yes, Yes to All, No, No to All.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons.YesToAllNoToAllCancel">
            <summary>Yes, Yes to All, No, No to All, Cancel.</summary>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon">
            <summary>
            Icon shown on the dialog.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon.Asterisk">
            <summary>Asterisk icon.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon.Error">
            <summary>Error icon.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon.Exclamation">
            <summary>Exlamation icon.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon.Hand">
            <summary>Hand icon.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon.Information">
            <summary>Information icon.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon.None">
            <summary>No icon.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon.Question">
            <summary>Question icon.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.Icon.Warning">
            <summary>Warning icon.</summary>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxYesNoToAll.DefaultButton">
            <summary>
            Button that is the default on the form (button activated if "enter" is pressed).
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.DefaultButton.Button1">
            <summary>Button 1.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.DefaultButton.Button2">
            <summary>Button 2.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.DefaultButton.Button3">
            <summary>Button 3.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.DefaultButton.Button4">
            <summary>Button 4.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAll.DefaultButton.Button5">
            <summary>Button 5.</summary>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxYesNoToAll.StoreResultDelegate">
            <summary>
            Delegate signature for the function used to save and retrieve the result of showing the dialog box.
            </summary>
            <param name="result">Result of showing the dialog box.</param>
            <param name="setvalue">If true, the result must be saved.  If fase, the result must be retrieved and stored in the "result" parameter.</param>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxYesNoToAllForm">
            <summary>
            Provides parallel behavior to the MessageBox class but adds "Yes to All" and "No to All" options.  This is the form that is diplayed.
            This class should not be used directory.  It is used by the MessabeBoxYesNoToAll and, in combination, they provide the behavior which
            parallels the standard MessageBox while adding the new controls.
            
            
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="text">Message to display.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="text">Message to display.</param>
            <param name="caption">Title of message box.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.#ctor(System.String,System.String,DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons)">
            <summary>
            Constructor.
            </summary>
            <param name="text">Message to display.</param>
            <param name="caption">Title of message box.</param>
            <param name="buttons">Which buttons to show.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.#ctor(System.String,System.String,DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons,DigitalProduction.Forms.MessageBoxYesNoToAll.Icon)">
            <summary>
            Constructor.
            </summary>
            <param name="text">Message to display.</param>
            <param name="caption">Title of message box.</param>
            <param name="buttons">Which buttons to show.</param>
            <param name="icon">Icon to show.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.#ctor(System.String,System.String,DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons,DigitalProduction.Forms.MessageBoxYesNoToAll.Icon,DigitalProduction.Forms.MessageBoxYesNoToAll.DefaultButton)">
            <summary>
            Constructor.
            </summary>
            <param name="text">Message to display.</param>
            <param name="caption">Title of message box.</param>
            <param name="buttons">Which buttons to show.</param>
            <param name="icon">Icon to show.</param>
            <param name="defaultbutton">Which button is default.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.Initialize">
            <summary>
            Common construction/initialization.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.btnYes_Click(System.Object,System.EventArgs)">
            <summary>
            Yes button pressed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.btnYesToAll_Click(System.Object,System.EventArgs)">
            <summary>
            Yes to All button pressed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.btnNo_Click(System.Object,System.EventArgs)">
            <summary>
            No button pressed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.btnNoToAll_Click(System.Object,System.EventArgs)">
            <summary>
            No to All button pressed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Cancel button pressed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.SetIcon(DigitalProduction.Forms.MessageBoxYesNoToAll.Icon)">
            <summary>
            Creates the image on the control from the specified icon.
            </summary>
            <param name="icon">Icon to show.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.SetButtons(DigitalProduction.Forms.MessageBoxYesNoToAll.Buttons)">
            <summary>
            Sets which buttons are shown on the control.
            </summary>
            <param name="buttons">Which buttons are shown.</param>
            <returns>An array of bools indicating which buttons are t</returns>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxYesNoToAllForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxYesNoToAllForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="P:DigitalProduction.Forms.MessageBoxYesNoToAllForm.Result">
            <summary>
            Dialog result.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.ProgressDialog">
            <summary>
            Summary description for ProgressDialog.
            </summary>
            <summary>
            Provide summary.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.#ctor(System.Windows.Forms.ProgressBarStyle)">
            <summary>
            Constructor for changing the progress bar style.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.tmrClock_Tick(System.Object,System.EventArgs)">
            <summary>
            Updates the clock on the status bar.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.StartShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the form with the specified owner to the use.  Also resets the progress bar and starts the timer.
            </summary>
            <param name="owner">Any object that implements the System.Windows.Forms.IWin32Window and represents the top-level window that will own this form.</param>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.StartTimer">
            <summary>
            Start timing.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.StopTimer">
            <summary>
            Stop the timer.  The time elapsed between the start and stop can then be retrieved.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.ResetTimer">
            <summary>
            Resets the timer to zero.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.ResetProgress">
            <summary>
            Reset the progress bar.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.PerformStep">
            <summary>
            Perform step.  Increments the progress bar.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.CloseOK">
            <summary>
            Allow the option to close this dialog externally (from another class) and return DialogResult.OK
            as the result.  Using Close from another class always results in DialogResult.Cancel as the result.
            
            Setting the dialog result will cause the closing of the form if it is shown model (using "ShowDialog" or "StartShowDialog").
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.UpdateProgress(System.Int32)">
            <summary>
            Update the progress bar via a function.
            </summary>
            <param name="value">Value of the progress bar as an integer from 0-100.</param>
            <remarks>
            This can be used as an UpdateProgressCallBack delegate to update the progress bar 
            from another thread.
            </remarks>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.SetCaption(System.String)">
            <summary>
            Sets the text (caption) shown on the form.
            </summary>
            <param name="caption">Text to display.</param>
        </member>
        <member name="F:DigitalProduction.Forms.ProgressDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.ProgressDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.ProgressDialog.ElapsedTime">
            <summary>
            Get the time elapsed between the start time and end time (or, if timing has not ended, the time between
            the start time and now).
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.ProgressDialog.ProgressBar">
            <summary>
            Determines if the progress bar is visible.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.ProgressDialog.Maximum">
            <summary>
            The maximum value to use for the progress bar.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.ProgressDialog.Value">
            <summary>
            The value of the progress bar.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.ProgressDialog.UpdateProgressCallBack">
            <summary>
            Update the progress bar via a call back function from another thread.
            </summary>
            <param name="value">Value of the progress bar as an integer from 0-100.</param>
        </member>
        <member name="T:DigitalProduction.Forms.ProgressDialog.UpdateCaptionCallBack">
            <summary>
            Update the text (caption) on the form.
            </summary>
            <param name="caption">Text to display.</param>
        </member>
        <member name="T:DigitalProduction.Forms.ProgressDialog.CallBack">
            <summary>
            General call back delegate.  Can be used to update the progress bar, close the form, et cetera via a call back function from another thread.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.RecentFilesList">
            <summary>
            A class for creating a recently used files list on a menu.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.#ctor(System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            Basic constructior.
            </summary>
            <param name="menuitem">Menu item the list is attached to.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.#ctor(System.Windows.Forms.ToolStripMenuItem,DigitalProduction.Forms.RecentFilesList.RecentFileClickedDelegate)">
            <summary>
            Basic constructior.
            </summary>
            <param name="menuitem">Menu item the list is attached to.</param>
            <param name="fileclickcallback">The call back function (delegate) to receive the path displayed on the control.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.#ctor(System.Windows.Forms.ToolStripMenuItem,DigitalProduction.Forms.RecentFilesList.RecentFileClickedDelegate,DigitalProduction.Forms.RecentFilesList.RecentFileNotFoundDelegate)">
            <summary>
            Basic constructior.
            </summary>
            <param name="menuitem">Menu item the list is attached to.</param>
            <param name="fileclickcallback">The call back function (delegate) to receive the path displayed on the control.</param>
            <param name="filenotfoundcallback">The call back function (delegate) to receive the path displayed on the control when the corresponding file does not exist.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.#ctor(System.Windows.Forms.ToolStripMenuItem,DigitalProduction.Forms.RecentFilesList.RecentFileClickedDelegate,DigitalProduction.Forms.RecentFilesList.RecentFileNotFoundDelegate,DigitalProduction.WinRegistry.WinRegistryAccess)">
            <summary>
            Constructor to use the option to automatically save the list and size of the list to the registry.
            </summary>
            <param name="menuitem">Menu item the list is attached to.</param>
            <param name="fileclickcallback">The call back function (delegate) to receive the path displayed on the control.</param>
            <param name="filenotfoundcallback">The call back function (delegate) to receive the path displayed on the control when the corresponding file does not exist.</param>
            <param name="registryaccess">Registry access of parent form.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.AddNewFilePath(System.String)">
            <summary>
            Add a new file (path) to the top of the recently used files list.
            </summary>
            <param name="path">File (path) to add.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.PushTop(System.String)">
            <summary>
            Creates a list of strings that the new list of paths, with the new path inserted at the top.  If the supplied
            path is located in the list at some other position, it is removed from that position and the other paths moved
            up to fill that slot.
            </summary>
            <param name="path">Path to insert at top of the list.</param>
            <returns>An array of strings with the path insert at the top (entry"0").</returns>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.FindIndexOf(System.String)">
            <summary>
            Finds the zeroth based index of the path in the list of existing paths.  If the path is not found, the last index is returned.
            </summary>
            <param name="path">Path to search for.</param>
            <returns>Position of the path, or last index.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.FindIndexOf(System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            Finds the zeroth based index of the ToolStripMenuItem in the list of menu items.  If the control is not found, the last index is returned.
            </summary>
            <param name="menuitem">ToolStripMenuItem to search for.</param>
            <returns>Position of the ToolStripMenuItem, or last index.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.RemovePath(System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            Removes the path found on the ToolStripMenuItem from the list of paths.
            </summary>
            <param name="menuitem">ToolStripMenuItem which contains the path to be removed.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.SetFileNames">
            <summary>
            Establishes a group of ToolStripMenuItems on the parent control.  The menu items are populate
            with the file names supplied as input.  The number of menu items added to the parent control
            is the same as the length of the input array.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.AddPathToMenuItem(System.Windows.Forms.ToolStripMenuItem,System.Int32,System.String)">
            <summary>
            Sets the Text and ToolTipText of a ToolStripMenuitem.
            </summary>
            <param name="menuitem">ToolStripMenuItem to edit.</param>
            <param name="displayednumber">Number to display in front of path.  It's the position on the parent form.</param>
            <param name="path">Path to be displayed.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.mnuRecentFile_Clicked(System.Object,System.EventArgs)">
            <summary>
            Event handler for when a recent file is clicked.  The path associated with the clicked ToolStripMenuItem
            is gotten from the ToolTip.  If the file exists the RecentFileClickedDelegate is called.  Otherwise the
            RecentFileNotFoundDelegate is called.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.RecentFilesList.mnuParent_DropDownOpening(System.Object,System.EventArgs)">
            <summary>
            Event handler for the parent's drop down opening.  Used to update the number of items shown if it has changed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:DigitalProduction.Forms.RecentFilesList.FileClickedDelegate">
            <summary>
            The call back function for when a recent file menu items is clicked.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.RecentFilesList.FileNotFoundDelegate">
            <summary>
            The call back function for when a recent file menu item is clicked, but the file does not exist at the location specified on the control.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.RecentFilesList.RegistryAccess">
            <summary>
            Access to the registry for storing data between program instances.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.RecentFilesList.MaxNumberOfItemsShown">
            <summary>
            Get the number of controls that are shown.  Attempts to retrieve the value from the registry, if it
            fails, the maximum number of allowed files is returned.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.RecentFilesList.RemoveNotFoundFiles">
            <summary>
            Gets or sets a value that states whether controls should be removed if they are clicked and the file does not exist.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.RecentFilesList.RecentFileClickedDelegate">
            <summary>
            Call back delegate for when a recent file control was clicked and the path on the control exists.
            </summary>
            <param name="path">The path that is displayed on the clicked control.</param>
        </member>
        <member name="T:DigitalProduction.Forms.RecentFilesList.RecentFileNotFoundDelegate">
            <summary>
            Call back delegate for when a recent file control was clicked and the path on the control does not exist.
            </summary>
            <param name="path">The path that is displayed on the clicked control.</param>
        </member>
        <member name="T:DigitalProduction.Forms.NumericTextBox">
            <summary>
            Text box that only allows numeric values.
            
            From: http://msdn.microsoft.com/en-us/library/dd183783%28v=vs.90%29.aspx
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.#ctor">
            <summary>
            Construction.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Restricts the entry of characters to digits (including hexadecimal), the negative sign, the decimal point,
            and editing keystrokes (backspace).  
            </summary>
            <param name="eventargs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.HandleNewKey(System.Char)">
            <summary>
            Insert the new key if it is valid, otherwise ignore it.
            </summary>
            <param name="keyinput">Key, as a string, to try to insert into the text.</param>
            <returns>True if the key has been handled (inserted or ignored) by this method, otherwise false is returned and the base control can handle it.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.HandleNewKey(System.Char,System.Boolean@)">
            <summary>
            Insert the new key if it is valid, otherwise ignore it.
            </summary>
            <param name="keyinput">Key, as a string, to try to insert into the text.</param>
            <param name="validkey">Output that returns true if the key was valid for insertion, false otherwise.</param>
            <returns>True if the key has been handled (inserted or ignored) by this method, otherwise false is returned and the base control can handle it.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.DoBeep">
            <summary>
            Beep on an error, if the option is enabled.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key down event.
            </summary>
            <param name="eventargs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key up event.
            </summary>
            <param name="eventargs">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            When validating, pad any remaining decimal places with zeros.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.ConvertValueToDouble(System.String,System.Boolean@)">
            <summary>
            Convert the value to a double and catch any errors.
            </summary>
            <param name="text">Text to try to convert.</param>
            <param name="passed">Flag to indicate if the conversion was successful.</param>
            <returns>The converted value as a double.  If the conversion fails, a FormatException is thrown.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.UpdateText(System.Char)">
            <summary>
            Checks current input characters and updates control with valid characters only.  Eliminates all digits to the
            right of extraneous decimal characters.
            </summary>
            <param name="newkey">New key (char) entered.</param>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.InsertNewKeyIntoString(System.Char,System.Int32)">
            <summary>
            Insert the new key character into the text displayed on the text box.  Selected text will be overwritten.
            </summary>
            <param name="newkey">Character to insert.</param>
            <param name="position">Position to insert the character at.</param>
            <returns>A new string with the selected text removed and the new character inserted.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.EnforceAllDecimalPlaces">
            <summary>
            Ensures the number of decimal places shown is correct.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.NumericTextBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DigitalProduction.Forms.NumericTextBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.Text">
            <summary>
            Ensure all the decimal places are correct when setting the text.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.BeepOnInvalidKey">
            <summary>
            If true, the default "beep" sound will be emitted if an invalid key is pressed.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.LimitDecimalPlaces">
            <summary>
            Specifies if the number of decimal places is limited.  If they are limited, then only the number
            of decimal digits specified by NumberOfDecimalPlaces is shown on the control.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.NumberOfDecimalPlaces">
            <summary>
            If LimitDecimalPlaces is true, then this is the number of decimal digits allowed.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.DisplayAllDecimalPlaces">
            <summary>
            If DisplayAllDecimalPlaces is true, then zeros will pad any decimal places not filled by the user.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.EnforceMinimumValue">
            <summary>
            Restricts the user to entering values equal to or above the minimum value.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.MinimumValue">
            <summary>
            Minimum value allowed in the text box.  Only enforces if "EnforceMinimumValue" is true.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.EnforceMaximumValue">
            <summary>
            Restricts the user to entering values equal to or below the maximum value.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.MaximumValue">
            <summary>
            Minimum value allowed in the text box.  Only enforces if "EnforceMinimumValue" is true.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.AllowSeparator">
            <summary>
            Specifies is the separator character is allowed.
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.IntValue">
            <summary>
            Return value as an integer (int).
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.NumericTextBox.DecimalValue">
            <summary>
            Return value as a decimal.
            </summary>
        </member>
        <member name="T:DigitalProduction.Gaming.PlayerBase`1">
            <summary>
            A Blackjack player.  The player is responsible for decision making for the hand.  It also
            contains the money the player has and a holder for the stats of the player.
            </summary>
        </member>
        <member name="F:DigitalProduction.Gaming.PlayerBase`1._score">
            <summary>The player's score.</summary>
        </member>
        <member name="M:DigitalProduction.Gaming.PlayerBase`1.#ctor(`0,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="score">Amount of money the player starts with.</param>
            <param name="name">Name of player.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.PlayerBase`1.#ctor(`0)">
            <summary>
            Constructor, name is set to "Anonymouns."
            </summary>
            <param name="score">Amount of money the player starts with.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.PlayerBase`1.#ctor">
            <summary>
            Constructor, name is set to "Anonymous" and money is set to 10,000.
            </summary>
        </member>
        <member name="P:DigitalProduction.Gaming.PlayerBase`1.Name">
            <value>
            Name of the player.  Read/write.
            </value>
        </member>
        <member name="P:DigitalProduction.Gaming.PlayerBase`1.Score">
            <value>
            Player's score.  Read/write.
            </value>
        </member>
        <member name="T:DigitalProduction.Gaming.Shoe">
            <summary>
            Summary not provided for the class Shoe.
            </summary>
        </member>
        <member name="M:DigitalProduction.Gaming.Shoe.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:DigitalProduction.Generic.MappingMatrix`2">
            <summary>
            Stores a matrix (2 dimensional array) of data which can be accessed by an enumeration, but the data does not have
            to be stored in the matrix in the same order as the items in the enumeration are defined.
            </summary>
            <typeparam name="KeyType">Enumeration type used as a key to access data.</typeparam>
            <typeparam name="DataType">Type of data to store in the matrix.</typeparam>
        </member>
        <member name="M:DigitalProduction.Generic.MappingMatrix`2.#ctor">
            <summary>
            Parameterless constructor for serialization.
            </summary>
        </member>
        <member name="M:DigitalProduction.Generic.MappingMatrix`2.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="activekeys">List of active keys, in the order that they are contained in the data.</param>
        </member>
        <member name="M:DigitalProduction.Generic.MappingMatrix`2.#ctor(DigitalProduction.Generic.MappingMatrix{`0,`1})">
            <summary>
            Copy constructor.
            </summary>
            <param name="original"></param>
        </member>
        <member name="M:DigitalProduction.Generic.MappingMatrix`2.IsActiveKey(`0)">
            <summary>
            Specifies if the KeyType is active (has data associated with it).
            </summary>
            <param name="key">KeyType to check.</param>
            <returns>True is data exists for the key time, false otherwise.</returns>
        </member>
        <member name="M:DigitalProduction.Generic.MappingMatrix`2.Push(System.Collections.Generic.List{`1})">
            <summary>
            Adds a set of data entries to the back of the data.
            </summary>
            <param name="entries">Set of data, one entry per each active key type, in the same order as the active key types.</param>
        </member>
        <member name="M:DigitalProduction.Generic.MappingMatrix`2.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:DigitalProduction.Generic.MappingMatrix`2.RemoveRanges(System.Collections.Generic.List{System.Int32[]})">
            <summary>
            Removes sections of the data.  Much more effecient that RemoveRange for removing multiple ranges.
            </summary>
            <param name="indexestoremove">Which sections to be removed.</param>
        </member>
        <member name="P:DigitalProduction.Generic.MappingMatrix`2.NumberOfKeys">
            <summary>
            Total number of keys available in the enumeration used for KeyType.
            </summary>
        </member>
        <member name="P:DigitalProduction.Generic.MappingMatrix`2.ActiveKeys">
            <summary>
            List of keys which we have data for.
            </summary>
        </member>
        <member name="P:DigitalProduction.Generic.MappingMatrix`2.NumberOfActiveKeys">
            <summary>
            Number of the keys that we have data for.
            </summary>
        </member>
        <member name="P:DigitalProduction.Generic.MappingMatrix`2.Map">
            <summary>
            Map which specifies where data is in the data array.
            </summary>
        </member>
        <member name="P:DigitalProduction.Generic.MappingMatrix`2.Data">
            <summary>
            Raw data.
            </summary>
        </member>
        <member name="P:DigitalProduction.Generic.MappingMatrix`2.LengthOfData">
            <summary>
            Get the number of entries (length) for the data.
            </summary>
        </member>
        <member name="P:DigitalProduction.Generic.MappingMatrix`2.Item(`0)">
            <summary>
            Brackets operator.
            </summary>
            <param name="key">Which set of data to get.</param>
            <returns>The set of data associated with the key in a List.</returns>
        </member>
        <member name="P:DigitalProduction.Generic.MappingMatrix`2.NumberOfEntries">
            <summary>
            Length of the data (number of elements for each KeyType).
            </summary>
        </member>
        <member name="T:DigitalProduction.Math">
            <summary>
            Math functions, equations, and calculations.
            </summary>
        </member>
        <member name="M:DigitalProduction.Math.DegreeToRadian(System.Double)">
            <summary>
            Convert degrees to radians.
            </summary>
            <param name="angle">Angle to convert.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:DigitalProduction.Math.RadianToDegree(System.Double)">
            <summary>
            Convert radians to degrees.
            </summary>
            <param name="angle">Angle to convert.</param>
            <returns>Angle in degrees.</returns>
        </member>
        <member name="M:DigitalProduction.Math.AreaOfCircleByDiameter(System.Double,System.Double)">
            <summary>
            Area of a ring (circle with inner concentric circle subtracted).
            </summary>
            <param name="outerdiameter">Diameter of outer circle.</param>
            <param name="innerdiameter">Diameter of inner circle.</param>
            <returns>Area.</returns>
        </member>
        <member name="T:DigitalProduction.Reflection.Attributes">
            <summary>
            Get attributes.  Provide convenient access for common attribute properties.
            
            
            Get description of an enumeration:
            	Converts from a [Description("")] to a enum value.
            	Grabs the [Description("")] from a enum value.
            
            	Based on code written by skot:
            	http://www.codeproject.com/useritems/EnumDescriptionAttribute.asp
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetDisplayName(System.Type)">
            <summary>
            Gets display name of an object.
            </summary>
            <param name="type">Type of the object to retrieve the Attribute from.</param>
            <returns>Display name string if it is found.</returns>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetDisplayName(System.Type,System.String)">
            <summary>
            Gets display name of an object.
            </summary>
            <param name="type">Type of the object to retrieve the Attribute from.</param>
            <param name="defaultValue">Default value to use if the attribute is not found.</param>
            <returns>Display name string if it is found.</returns>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetDisplayName(System.Object)">
            <summary>
            Gets display name of an object.
            </summary>
            <param name="instance">Instance of the object type to retrieve the Attribute from.</param>
            <returns>Display name string if it is found.</returns>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetDisplayName(System.Object,System.String)">
            <summary>
            Gets display name of an object.
            </summary>
            <param name="instance">Instance of the object type to retrieve the Attribute from.</param>
            <param name="defaultValue">Default value to use if the attribute is not found.</param>
            <returns>Display name string if it is found.</returns>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetDescription(System.Type)">
            <summary>
            Gets the description attribute of an enumeration.
            </summary>
            <param name="type">Type of the object to retrieve the Attribute from.</param>
            <returns>Description string for the enumeration if found, default value if not.</returns>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetDescription(System.Type,System.String)">
            <summary>
            Gets the description attribute of an enumeration.
            </summary>
            <param name="type">Type of the object to retrieve the Attribute from.</param>
            <param name="defaultValue">Default value to return if description is not found.</param>
            <returns>Description string for the enumeration if found, default value if not.</returns>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetDescription(System.Object)">
            <summary>
            Gets the description attribute of an enumeration.
            </summary>
            <param name="instance">Value of the enumeration.</param>
            <returns>Description string for the enumeration if found, default value if not.</returns>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetDescription(System.Object,System.String)">
            <summary>
            Gets the description attribute of an enumeration.
            </summary>
            <param name="instance">Value of the enumeration.</param>
            <param name="defaultValue">Default value to return if description is not found.</param>
            <returns>Description string for the enumeration if found, default value if not.</returns>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetAliases(System.Object)">
            <summary>
            Gets a list of names provided by the Alias attribute.
            </summary>
            <param name="instance">Instance of the object to retrieve the aliases from.</param>
            <returns>A List of strings containing the aliases of the class/structure.</returns>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetAliases(System.Type)">
            <summary>
            Gets a list of names provided by the Alias attribute.
            </summary>
            <param name="type">Type of object to retrieve the aliases from.</param>
            <returns>A List of strings containing the aliases of the class/structure.</returns>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetAttribute``1(System.Object)">
            <summary>
            Get the first Attribute of type "T" for the Type that the provided object is.
            </summary>
            <typeparam name="T">Type of attribute to get (not type of the object).</typeparam>
            <param name="instance">Instance of the object type to retrieve the Attribute from.</param>
            <returns>The first Attribute found of the type, or the default value of type T otherwise.</returns>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetAttribute``1(System.Type)">
            <summary>
            Get the first Attribute of type "T" for the Type that the provided object is.
            </summary>
            <typeparam name="T">Type of attribute to get (not type of the object).</typeparam>
            <param name="type">Type of the object to retrieve the Attribute from.</param>
            <returns>The first Attribute found of the type, or the default value of type T otherwise.</returns>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetAllAttributes``1(System.Object)">
            <summary>
            Gets a list of Attributes of type "T" for the Type that the provided object is.
            </summary>
            <typeparam name="T">Type of attribute to get (not type of the object).</typeparam>
            <param name="instance">Instance of the object type to retrieve the Attribute from.</param>
            <returns>A List of all Attributes found of the specified type.</returns>
        </member>
        <member name="M:DigitalProduction.Reflection.Attributes.GetAllAttributes``1(System.Type)">
            <summary>
            Get a list of Attributes of the specified Type.
            </summary>
            <typeparam name="T">Type of attribute to get (not type of the object).</typeparam>
            <param name="type">Type of the object to retrieve the Attribute from.</param>
            <returns>A List of all Attributes found of the specified type.</returns>
        </member>
        <member name="T:DigitalProduction.Reflection.EnumUtils">
            <summary>
            Enumeration utilities.
            
            Get description of an enumeration:
            	Converts from a [Description("")] to a enum value.
            	Grabs the [Description("")] from a enum value.
            
            	Based on code written by skot:
            	http://www.codeproject.com/useritems/EnumDescriptionAttribute.asp
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.EnumUtils.NumberOfDefinedItems``1">
            <summary>
            Gets the number of items defined within an enumeration definition.
            </summary>
            <typeparam name="T">Enumeration type that items are defined in.</typeparam>
            <returns>Number of items defined within an enumeration.</returns>
        </member>
        <member name="T:DigitalProduction.Forms.FolderSelect">
            <summary> Class FolderSelect 
            <para>An example on how to build a folder browser dialog window using C# and the .Net framework.</para>
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelect.#ctor">
            <summary>
            Construction.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelect.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelect.FillTree">
            <summary> Method FillTree
            <para>This method is used to initially fill the treeView control with a list
            of available drives from which you can search for the desired folder.</para>
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelect.getSubDirs(System.Windows.Forms.TreeNode)">
            <summary> Method getSubDirs
            <para>This function will scan the specified parent for any subfolders 
            if they exist.  To minimize the memory usage, we only scan a single 
            folder level down from the existing, and only if it is needed.</para>
            <param name="parent">The parent folder in which to search for sub-folders.</param>
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelect.fixPath(System.Windows.Forms.TreeNode)">
            <summary> Method fixPath
            <para>For some reason, the treeView will only work with paths constructed like the following example.
            "c:\\Program Files\Microsoft\...".  What this method does is strip the leading "\\" next to the drive
            letter.</para>
            <param name="node">The folder that needs it's path fixed for display.</param>
            <returns>The correctly formatted full path to the selected folder.</returns>
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelect.DisplayError(System.Exception)">
            <summary>
            Displays a message box with the error message.
            </summary>
            <param name="ex">Exception that occurred.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelect.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelect.treeView1_BeforeSelect(System.Object,System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary> Method treeView1_BeforeSelect
            <para>Before we select a tree node we want to make sure that we scan the soon to be selected
            tree node for any sub-folders.  this insures proper tree construction on the fly.</para>
            <param name="sender">The object that invoked this event</param>
            <param name="e">The TreeViewCancelEventArgs event arguments.</param>
            <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs"/>
            <see cref="T:System.Windows.Forms.TreeView"/>
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelect.treeView1_BeforeExpand(System.Object,System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary> Method treeView1_BeforeExpand
            <para>Before we expand a tree node we want to make sure that we scan the soon to be expanded
            tree node for any sub-folders.  This insures proper tree construction on the fly.</para>
            <param name="sender">The object that invoked this event.</param>
            <param name="e">The TreeViewCancelEventArgs event arguments.</param>
            <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs"/>
            <see cref="T:System.Windows.Forms.TreeView"/>
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelect.FolderSelect_Resize(System.Object,System.EventArgs)">
            <summary>
            Handles the resizing of the form.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguements.</param>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelect.PositionButtons">
            <summary>
            Adjusts select and cancel buttons so that they stay in the middle.  Adjusts
            the X position only.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelect.cancelBtn_Click(System.Object,System.EventArgs)">
            <summary> Method cancelBtn_Click
            <para>This method cancels the folder browsing.</para>
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.FolderSelect.selectBtn_Click(System.Object,System.EventArgs)">
            <summary> Method selectBtn_Click
            <para>This method accepts which ever folder is selected and closes this application 
            with a DialogResult.OK result if you invoke this form though Form.ShowDialog().  
            In this example this method simply looks up the selected folder, and presents the 
            user with a message box displaying the name and path of the selected folder.
            </para>
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.FolderSelect.FolderName">
            <summary> Method FolderName
            <para>A method to retrieve the short name for the selected folder.</para>
            <returns>The folder name for the selected folder.</returns>
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.FolderSelect.FullPath">
            <summary> Method FullPath
            <para>Retrieve the full path for the selected folder.</para>
            <returns>The correctly formatted full path to the selected folder.</returns>
            <seealso cref="M:DigitalProduction.Forms.FolderSelect.fixPath(System.Windows.Forms.TreeNode)"/>
            </summary>
        </member>
        <member name="P:DigitalProduction.Forms.FolderSelect.Info">
            <summary> Method Info
            <para>Retrieve the full DirectoryInfo object associated with the selected folder.  Note
            that this will not have the corrected full path string.</para>
            <returns>The full DirectoryInfo object associated with the selected folder.</returns>
            <see cref="T:System.IO.DirectoryInfo"/>
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxDNS">
            <summary>
            A message box that incorporates a check box to indicate that the message should not be displayed again.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._registryaccessfunction">
            <summary>
            Function template to store the registry value.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._cbt">
            <summary>
            Hook onto window events.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._hwnd">
            <summary>
            Windows handle of this window.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._checkbox">
            <summary>
            Check box that is created on the message box.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._bInit">
            <summary>
            Is this window active.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._boxischecked">
            <summary>
            Is the check box added to the message box checked?
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._registrykey">
            <summary>
            Registry key location.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._registryvalue">
            <summary>
            Registry value (entry).
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS._DoNotShowAgainMessage">
            <summary>
            Default text for the Do Not Show check box.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.#ctor(System.String,System.String)">
            <summary>
            Constructor.  Use this constructor to access a registry key by providing the key and value as strings.
            </summary>
            <param name="registrykey">The registry key used to hold the registry value which is used to store the do not show again value.</param>
            <param name="registryvalue">Registry value which stores the result of the do not show again check box.</param>
            <example>
            MessageBoxDNS dialog = new MessageBoxDNS(@"Software\My Company\My App", "Dont Show Again");
            dialog.Show(this, "Warning: Something", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
            </example>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.#ctor(DigitalProduction.Forms.MessageBoxDNS.RegistryValueDelegate)">
            <summary>
            Constructor.  Use this constructor to access a registry key (or any other place that the value can be stored) by
            providing a function of the form RegistryValueDelegate.
            </summary>
            <param name="registryaccessfunction">Function that sets and gets a stored boolean.</param>
            <example>
            MessageBoxDNS dialog = new MessageBoxDNS(new MessageBoxDNS.RegistryValueDelegate(MyFunction));
            dialog.Show(this, "Warning: Something", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
            </example>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Show the message box with the specified settings.
            </summary>
            <param name="owner">The IWin32Window the message box will display in front of.</param>
            <param name="text">The text to display in the message box. </param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the MessageBoxDefaultButton values the specifies the default button for the message box.</param>
            <returns>One of the DialogResult values.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Show the message box with the specified settings.
            </summary>
            <param name="owner">The IWin32Window the message box will display in front of.</param>
            <param name="text">The text to display in the message box. </param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <returns>One of the DialogResult values.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Show the message box with the specified settings.
            </summary>
            <param name="owner">The IWin32Window the message box will display in front of.</param>
            <param name="text">The text to display in the message box. </param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <returns>One of the DialogResult values.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.Show(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Show the message box with the specified settings.
            </summary>
            <param name="owner">The IWin32Window the message box will display in front of.</param>
            <param name="text">The text to display in the message box. </param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <returns>One of the DialogResult values.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.Show(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Show the message box with the specified settings.
            </summary>
            <param name="owner">The IWin32Window the message box will display in front of.</param>
            <param name="text">The text to display in the message box. </param>
            <returns>One of the DialogResult values.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.WndCreated(System.Object,MsdnMag.CbtEventArgs)">
            <summary>
            Window created.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.WndDestroyed(System.Object,MsdnMag.CbtEventArgs)">
            <summary>
            Window destroyed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.WndActivated(System.Object,MsdnMag.CbtEventArgs)">
            <summary>
            Window activated.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.DefaultDialogResult(System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Determines what the default dialog result should be for a message box with the specified buttons and default button.  Used
            when the message box is not displayed because the Do Not Show check box was previously checked.
            </summary>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="defaultButton"></param>
            <returns>One of the MessageBoxDefaultButton values the specifies the default button for the message box.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.DestroyWindow(System.IntPtr)">
            <summary>
            Destroy a windows.  Imported from user32.dll.
            </summary>
            <param name="hwnd">Windows handle of window.</param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.GetDlgItem(System.IntPtr,System.Int32)">
            <summary>
            Get an item on a dialog.  Imported from user32.dll.
            </summary>
            <param name="hwnd">Windows handle of window.</param>
            <param name="id">ID of dialog item.</param>
            <returns>Pointer to item.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.GetWindowRect(System.IntPtr,DigitalProduction.Forms.MessageBoxDNS.RECT)">
            <summary>
            Get rectangle of the window.  Imported from user32.dll.
            </summary>
            <param name="hwnd">Windows handle of window.</param>
            <param name="rc">Rectangle to store info in.</param>
            <returns></returns>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.GetClientRect(System.IntPtr,DigitalProduction.Forms.MessageBoxDNS.RECT)">
            <summary>
            Get rectangle of client.  Imported from user32.dll.
            </summary>
            <param name="hwnd">Windows handle of window.</param>
            <param name="rc">Rectangle to store info in.</param>
            <returns>Int.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Move window.  Imported from user32.dll.
            </summary>
            <param name="hwnd">Windows handle of window.</param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <param name="bRepaint"></param>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.ScreenToClient(System.IntPtr,DigitalProduction.Forms.MessageBoxDNS.POINT)">
            <summary>
            Convert a screen point to a client point.  Imported from user32.dll.
            </summary>
            <param name="hwnd">Windows handle of window.</param>
            <param name="pt">Point to convert.</param>
            <returns>Int.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS._MessageBox(System.IntPtr,System.String,System.String,System.Int32)">
            <summary>
            Windows message box.  Imported from user32.dll.
            </summary>
            <param name="hwnd">Windows handle of window.</param>
            <param name="text">Text.</param>
            <param name="caption">Caption.</param>
            <param name="options">Options.</param>
            <returns>int</returns>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Send a message to a window.  Imported from user32.dll.
            </summary>
            <param name="hwnd">Windows handle of window.</param>
            <param name="msg">Message to send.</param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns>Pointer to window.</returns>
        </member>
        <member name="M:DigitalProduction.Forms.MessageBoxDNS.CreateWindowEx(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Create a window.  Imported from user32.dll.
            </summary>
            <param name="dwExStyle">Extended window style.</param>
            <param name="lpClassName">Registered class name.</param>
            <param name="lpWindowName">Window name.</param>
            <param name="dwStyle">Window style.</param>
            <param name="x">Horizontal position of window.</param>
            <param name="y">Vertical position of window.</param>
            <param name="nWidth">Window width.</param>
            <param name="nHeight">Window height.</param>
            <param name="hWndParent">Handle to parent or owner window.</param>
            <param name="hMenu">Menu handle or child identifier.</param>
            <param name="hInstance">Handle to application instance.</param>
            <param name="lpParam">Window-creation data.</param>
            <returns>Windows handle to created window.</returns>
        </member>
        <member name="P:DigitalProduction.Forms.MessageBoxDNS.DNSCheckBoxText">
            <summary>
            The string shown in the check box at the bottom of the message box.  A default is normally used to simplify usuage and
            promote continuity for all message boxes shown.  Read/write.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxDNS.RegistryValueDelegate">
            <summary>
            Delegate template to use if you want this message box to access the registry key through a function.  The function
            must store the value of registryvalue if setvalue is true.  If setvalue is false the function must put the stored
            value into registryvalue.
            </summary>
            <example>
            new MessageBoxDNS.RegistryValueDelegate(MyRegFunction)
            </example>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxDNS.POINT">
            <summary>
            Point.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS.POINT.x">
            <summary>X position of window.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS.POINT.y">
            <summary>Y position of window.</summary>
        </member>
        <member name="T:DigitalProduction.Forms.MessageBoxDNS.RECT">
            <summary>
            Rectangle.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS.RECT.left">
            <summary>Left position of window.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS.RECT.top">
            <summary>Top position of window.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS.RECT.right">
            <summary>Right position of window.</summary>
        </member>
        <member name="F:DigitalProduction.Forms.MessageBoxDNS.RECT.bottom">
            <summary>Bottom position of window.</summary>
        </member>
        <member name="T:DigitalProduction.Forms.StatusBarWithProgress">
            <summary>
            A status bar that contains a progress bar.
            </summary>
        </member>
        <member name="F:DigitalProduction.Forms.StatusBarWithProgress.ProgressBar">
            <summary>Progress bar displayed on the status bar.</summary>
        </member>
        <member name="M:DigitalProduction.Forms.StatusBarWithProgress.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.StatusBarWithProgress.Reposition(System.Object,System.Windows.Forms.StatusBarDrawItemEventArgs)">
            <summary>
            Handles repositioning of form.
            </summary>
            <param name="sender">Sender</param>
            <param name="sbdevent">Event arguments.</param>
        </member>
        <member name="P:DigitalProduction.Forms.StatusBarWithProgress.SetProgressBarPanel">
            <summary>
            Set the panel number that the status bar is to appear in.  Panels use zeroth based numbering.
            </summary>
        </member>
        <member name="T:DigitalProduction.Forms.WindowFollower">
            <summary>
            Allows a non-modal (does not block input to form that called it) to minimize and maximize the
            same as the dialog that called it.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.WindowFollower.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Set position of window.
            </summary>
            <param name="hWnd">Windows handle of window.</param>
            <param name="hWndInsertAfter">Handle of window to insert after.</param>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="cx">cx.</param>
            <param name="cy">cy.</param>
            <param name="uFlags">Flags.</param>
            <returns></returns>
        </member>
        <member name="M:DigitalProduction.Forms.WindowFollower.#ctor(System.Windows.Forms.Form,System.Windows.Forms.Form)">
            <summary>
            Constructor.
            </summary>
            <param name="master">The main window or application.</param>
            <param name="slave">The follower dialog or window.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowFollower.MasterResize(System.Object,System.EventArgs)">
            <summary>
            Called when the master is resized.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguements.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowFollower.SlaveResize(System.Object,System.EventArgs)">
            <summary>
            Called when the slave is resized.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguements.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowFollower.MasterClosing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when the master is closing.  Closes slave is the CloseSlaveWithMaster is true.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguements.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowFollower.SlaveClosing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when the slave is closing.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguements.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowFollower.MasterActivated(System.Object,System.EventArgs)">
            <summary>
            Called when the master is actived.  Sets the slave window as the second highest window.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguements.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowFollower.SlaveActivated(System.Object,System.EventArgs)">
            <summary>
            Called when the slave is actived.  Sets the master window as the second highest window.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguements.</param>
        </member>
        <member name="P:DigitalProduction.Forms.WindowFollower.CloseSlaveWithMaster">
            <value>
            Close the slave when the master closes if true.
            </value>
        </member>
        <member name="T:DigitalProduction.Forms.WindowStateManager">
            <summary>
            Stores the state of the window.  I.e. position, size, minimized, et cetera.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.WindowStateManager.#ctor(DigitalProduction.WinRegistry.WinRegistryAccess)">
            <summary>
            Constructor.
            </summary>
            <param name="regaccess">Registry access for this application.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowStateManager.Install">
            <summary>
            Install function used by the delegate to do installation work.  Primarily used for debugging a setup
            routine should handle normal installation.
            </summary>
        </member>
        <member name="M:DigitalProduction.Forms.WindowStateManager.OnResize(System.Object,System.EventArgs)">
            <summary>
            Handles a window resize in case the window is going to be maximized or minimized.  Stores what
            the "normal" values are.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguements.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowStateManager.OnMove(System.Object,System.EventArgs)">
            <summary>
            Handles a window movement so that the new position is saved.
            </summary>
            <param name="sender">Object that sent the message.</param>
            <param name="e">Parameters</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowStateManager.OnClosing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles saving all required information to the registry on the closing of the window.
            </summary>
            <param name="sender">Object that sent the message.</param>
            <param name="e">Cancel event arguements.</param>
        </member>
        <member name="M:DigitalProduction.Forms.WindowStateManager.OnLoad(System.Object,System.EventArgs)">
            <summary>
            Restores values from the registry when the form loads.
            </summary>
            <param name="sender">Object that sent the message.</param>
            <param name="e">Parameters</param>
        </member>
        <member name="T:DigitalProduction.Gaming.CardSuit">
            <summary>
            The suit of a cards.
            </summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardSuit.Clubs">
            <summary>Suit of the card is Clubs</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardSuit.Diamonds">
            <summary>Suit of the card is Diamonds.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardSuit.Hearts">
            <summary>Suit of the card is Hearts.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardSuit.Spades">
            <summary>Suit of the card is Spades.</summary>
        </member>
        <member name="T:DigitalProduction.Gaming.CardRank">
            <summary>
            The rank (face value) of cards.
            </summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Ace">
            <summary>The rank (face value) of the card is 1</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Two">
            <summary>The rank (face value) of the card is 2</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Three">
            <summary>The rank (face value) of the card is 3</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Four">
            <summary>The rank (face value) of the card is 4</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Five">
            <summary>The rank (face value) of the card is 5</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Six">
            <summary>The rank (face value) of the card is 6</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Seven">
            <summary>The rank (face value) of the card is 7</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Eight">
            <summary>The rank (face value) of the card is 8</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Nine">
            <summary>The rank (face value) of the card is 9</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Ten">
            <summary>The rank (face value) of the card is 10</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Jack">
            <summary>The rank (face value) of the card is Jack</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.Queen">
            <summary>The rank (face value) of the card is Queen</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.King">
            <summary>The rank (face value) of the card is King</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardRank.End">
            <summary>The rank of the card is not valid.</summary>
        </member>
        <member name="T:DigitalProduction.Gaming.Card">
            <summary>
            A simple class for holding a card.  Card face values are based on the rules of Blackjack.
            Derive a new class from this class is you need different values.
            </summary>
        </member>
        <member name="F:DigitalProduction.Gaming.Card._cardvalues">
            <summary>
            Array which is used to convert the face value of the card to a numeric value.  If these 
            are not the values for what ever type of game you are using this for then over write these
            in the derived class.  Must also override Value property.
            </summary>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.#ctor(DigitalProduction.Gaming.CardRank,DigitalProduction.Gaming.CardSuit)">
            <summary>
            Constructor.
            </summary>
            <param name="cardrank">Rank of card (face value).</param>
            <param name="cardsuit">Suit of card.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.GetCardSuit(System.String)">
            <summary>
            Convert a string to a CardSuit.
            </summary>
            <param name="cardsuit">String which represents the CardSuit.</param>
            <returns>CardSuit associated with cardsuit if found, otherwise CardSuit.Clubs.</returns>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.GetCardRank(System.String)">
            <summary>
            Convert a string to a CardRank.
            </summary>
            <param name="cardrank">String which represents the CardRank.</param>
            <returns>CardRank associated with cardrank if found, otherwise CardRank.Ace.</returns>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.GetCardValue(DigitalProduction.Gaming.CardRank)">
            <summary>
            Convert a card rank to a integer value.
            </summary>
            <param name="cardrank">CardRank to find the value of.</param>
            <returns>An integer which represents the value of the card.</returns>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.GetCardRank(System.Int32)">
            <summary>
            Get the CardRank of a card based on the value of the card.
            </summary>
            <param name="cardvalue">Value of card.</param>
            <returns>CardRank of cardvalue if found, CardRank.End if not found.</returns>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.CreateCards(System.Collections.ArrayList@,System.Int32)">
            <summary>
            Used to create "decks" of cards.  Cards are created in order and must be "shuffled."
            </summary>
            <param name="cards">Array to put cards in as they are created.</param>
            <param name="number_of_decks">Number of decks to created.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.CreateSpanishCards(System.Collections.ArrayList@,System.Int32)">
            <summary>
            Used to create Spanish "decks" of cards.  Spanish decks do not have the 10's in them.
            Cards are created in order and must be "shuffled."
            </summary>
            <param name="cards">Array to put cards in as they are created.</param>
            <param name="number_of_decks">Number of decks to created.</param>
        </member>
        <member name="M:DigitalProduction.Gaming.Card.GetHashCode">
            <summary>
            Hash code.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:DigitalProduction.Gaming.Card.Rank">
            <value>
            Get the rank of the card.
            </value>
        </member>
        <member name="P:DigitalProduction.Gaming.Card.Suit">
            <value>
            Get the suit of the card.
            </value>
        </member>
        <member name="P:DigitalProduction.Gaming.Card.Value">
            <value>
            Return the card's value based on the default card values (based on Blackjack rules).
            </value>
        </member>
        <member name="P:DigitalProduction.Gaming.Card.CardValues">
            <summary>
            The values (points) associated with the cards.
            </summary>
        </member>
        <member name="T:DigitalProduction.Gaming.CardsDLLAccess">
            <summary>
            Provides access to cards.dll on a Windows machine.  Handles initialization and destruction
            of resources and provides an easy to use interface.  This class can be used to draw cards from
            the class Card.cs located in this same library.
            </summary>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.cdtInit(System.Int32@,System.Int32@)">
            <summary>
            Initializes the cards.dll library.
            </summary>
            <param name="width">Width of cards in pixels.  Changing width doesn't seem to have an effect.</param>
            <param name="height">Height of cards in pixels.  Changing height doesn't seem to have an effect.</param>
            <returns>Returns true if successful, false if an error occurs.</returns>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.cdtTerm">
            <summary>
            Cleans up resources allocated with call to cdtInit().
            </summary>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.cdtDraw(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a card.
            </summary>
            <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
            <param name="x">X location, in pixels, of the upper left corner of the card being drawn.</param>
            <param name="y">Y location, in pixels, of the upper left corner of the card being drawn.</param>
            <param name="card">Card to draw.  This depends on the mode.  See enumerations for more info.</param>
            <param name="mode">Mode to draw in.  See enumeration for more information.</param>
            <param name="color">
            Color to use when drawing card.
            </param>
            <returns>Returns true if successful, false if an error occurs.</returns>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.cdtDrawExt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a card the size of dx and dy in pixels.  Warning - drawing cards at the non-standard size greatly distorts them.
            </summary>
            <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
            <param name="x">X location, in pixels, of the upper left corner of the card being drawn.</param>
            <param name="y">Y location, in pixels, of the upper left corner of the card being drawn.</param>
            <param name="dx">X size, in pixels, to draw the card.</param>
            <param name="dy">Y size, in pixels, to draw the card.</param>
            <param name="card">Card to draw.  This depends on the mode.  See enumerations for more info.</param>
            <param name="mode">Mode to draw in.  See enumeration for more information.</param>
            <param name="color">Color to use when drawing card.</param>
            <returns>Returns true if successful, false if an error occurs.</returns>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.cdtAnimate(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Animate a card back by displaying different frames.  This only works for some card backs.
            </summary>
            <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
            <param name="cardback">Card back to animate.  See enumerations for more information.</param>
            <param name="x">X location, in pixels, of the upper left corner of the card being drawn.</param>
            <param name="y">Y location, in pixels, of the upper left corner of the card being drawn.</param>
            <param name="frame">Frame to use in animation.  Different card backs have different number of frames.  See enumerations for more information.</param>
            <returns>Returns true if successful, false if an error occurs.</returns>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.Dispose">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.DrawCardFaceDown(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Draw a card face down (so back is showing).
            </summary>
            <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
            <param name="x">X position to draw card at (in pixels).</param>
            <param name="y">Y position to draw card at (in pixels).</param>
            <returns>True if drawing succeeded, false otherwise.</returns>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.DrawCardFaceUp(System.IntPtr,DigitalProduction.Gaming.Card,System.Int32,System.Int32)">
            <summary>
            Draw a card face up.
            </summary>
            <remarks>
            The mode (FaceUp) used causes the cards in "cards.dll" to be drawn in A,A,A,A,2,2,2,...K,K format.
            </remarks>
            <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
            <param name="card">Card to draw.</param>
            <param name="x">X position to draw card at (in pixels).</param>
            <param name="y">Y position to draw card at (in pixels).</param>
            <returns>True if drawing succeeded, false otherwise.</returns>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.DrawCardFaceUp(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a card face up.
            </summary>
            <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
            <param name="card">Integer position in cards.dll of card to draw.</param>
            <param name="x">X position to draw card at (in pixels).</param>
            <param name="y">Y position to draw card at (in pixels).</param>
            <returns>True if drawing succeeded, false otherwise.</returns>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.DrawNegativeCard(System.IntPtr,DigitalProduction.Gaming.Card,System.Int32,System.Int32)">
            <summary>
            Draw a card face up as a negative.
            </summary>
            <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
            <param name="card">Card to draw.</param>
            <param name="x">X position to draw card at (in pixels).</param>
            <param name="y">Y position to draw card at (in pixels).</param>
            <returns>True if drawing succeeded, false otherwise.</returns>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.DrawNegativeCard(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a card face up as a negative.
            </summary>
            <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
            <param name="card">Integer position in cards.dll of card to draw.</param>
            <param name="x">X position to draw card at (in pixels).</param>
            <param name="y">Y position to draw card at (in pixels).</param>
            <returns>True if drawing succeeded, false otherwise.</returns>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.DrawX(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Draw a X card place holder.
            </summary>
            <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
            <param name="x">X position to draw card at (in pixels).</param>
            <param name="y">Y position to draw card at (in pixels).</param>
            <returns>True if drawing succeeded, false otherwise.</returns>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.DrawO(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Draw a O card place holder.
            </summary>
            <param name="hdc">Device context to draw with.  Get the device context from Graphics.GetHdc()</param>
            <param name="x">X position to draw card at (in pixels).</param>
            <param name="y">Y position to draw card at (in pixels).</param>
            <returns>True if drawing succeeded, false otherwise.</returns>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.CardDLLPosition(DigitalProduction.Gaming.CardRank,DigitalProduction.Gaming.CardSuit)">
            <summary>
            Returns the position in cards.dll that the card is at.
            </summary>
            <param name="rank">The rank (face value) of the card who's position is desired.</param>
            <param name="suit">The suit of the card who's position is desired.</param>
            <returns>Integer position of card in cards.dll.</returns>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.CardDLLPosition(DigitalProduction.Gaming.Card)">
            <summary>
            Returns the position in cards.dll that the card is at.
            </summary>
            <param name="card">The card who's position is desired.</param>
            <returns>Integer position of card in cards.dll.</returns>
        </member>
        <member name="M:DigitalProduction.Gaming.CardsDLLAccess.CardInDLLPosition(System.Int32)">
            <summary>
            Return a new Card which represents the card in a given position of the "cards.dll."
            </summary>
            <param name="position">Position in the "cards.dll" to create a card from.</param>
            <returns>A new Card which is the same as the card in the position in the "cards.dll"</returns>
        </member>
        <member name="P:DigitalProduction.Gaming.CardsDLLAccess.CardBackStyle">
            <value>
            Get or set the card back style.
            </value>
        </member>
        <member name="P:DigitalProduction.Gaming.CardsDLLAccess.CardWidth">
            <value>
            Get the card drawing width in pixels.
            </value>
        </member>
        <member name="P:DigitalProduction.Gaming.CardsDLLAccess.CardHeight">
            <value>
            Get the card drawing height in pixels.
            </value>
        </member>
        <member name="P:DigitalProduction.Gaming.CardsDLLAccess.Color">
            <value>
            Color used in drawing.  Read/write.
            </value>
        </member>
        <member name="T:DigitalProduction.Gaming.CardsDLLAccess.BackStyle">
            <summary>
            Image to show on the backs of cards when they are face down.
            </summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.CrossHatch">
            <summary>CrossHatch in Windows XP; CrossHatch Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Sky">
            <summary>Sky in Windows XP; Weave 1 Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Mineral">
            <summary>Mineral Windows XP; Weave 2 Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Fish">
            <summary>Fish Windows XP; Robot Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Frog">
            <summary>Frog Windows XP; Flowers Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Flower">
            <summary>Flower Windows XP; Vine 1 Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Island">
            <summary>Islang Windows XP; Vine 2 Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Squares">
            <summary>Squares Windows XP; Fish 1 Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Magenta">
            <summary>Magenta Windows XP; Fish 2 Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.DesertMoon">
            <summary>Desert Moon Windows XP; Shells Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Astronaut">
            <summary>Astronaut Windows XP; Castle Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.Lines">
            <summary>Lines Windows XP; Island Pre-Windows XP.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.BackStyle.ToyCars">
            <summary>ToyCars Windows XP; Cardhand Pre-Windows XP.</summary>
        </member>
        <member name="T:DigitalProduction.Gaming.CardsDLLAccess.PlaceHolder">
            <summary>
            Types of place holders where a stack of cards will go, but there isn't any now.
            </summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.PlaceHolder.X">
            <summary>X style place holder.</summary>
        </member>
        <member name="F:DigitalProduction.Gaming.CardsDLLAccess.PlaceHolder.O">
            <summary>O style place holder.</summary>
        </member>
        <member name="T:DigitalProduction.IO.Path">
            <summary>
            Additional path utilities.
            </summary>
        </member>
        <member name="M:DigitalProduction.IO.Path.GetVolumeInformation(System.String,System.Text.StringBuilder,System.Int64,System.Int64,System.Int64,System.Int64,System.Text.StringBuilder,System.Int64)">
            <summary>
            Get information about volume.  Imported from kernel32.dll.
            </summary>
            <param name="PathName">String of the drive letter to get the volume label of.</param>
            <param name="VolumeName"></param>
            <param name="VolumeNameSize"></param>
            <param name="VolumeSerialNumber"></param>
            <param name="MaximumComponentLength"></param>
            <param name="FileSystemFlags"></param>
            <param name="FileSystemName"></param>
            <param name="FileSystemNameSize"></param>
            <returns>0 if failed, not zero if succeeded.</returns>
            <example>
            StringBuilder volumename = new StringBuilder(256);
            long serialnumber= new long();
            long maxcomponetlength = new long();
            long systemflags = new long();
            StringBuilder systemname = new StringBuilder(256);
            long returnvalue= new long();
            
            returnvalue = GetVolumeInformation(@"D:\", volumename, 256, serialnumber, maxcomponetlength,	systemflags, systemname, 256);
            if (returnvalue != 0) // do something.
            else // do nothing.
            </example>
        </member>
        <member name="M:DigitalProduction.IO.Path.GetDirectory(System.String)">
            <summary>
            Get directory from the path.  Checks that the directory exists also.
            </summary>
            <param name="path">Path to get the directory from.</param>
            <returns>Directory from the path if it exists, otherwise a blank string.</returns>
        </member>
        <member name="M:DigitalProduction.IO.Path.ChangeDirectoryDotDot(System.String)">
            <summary>
            Alters a directory name (given as a string) in a manner that is similar to what the DOS 
            command "CD.." does to the current directory at the DOS prompt (gives the parent directory).
            </summary>
            <param name="directory">The starting directory as a string.</param>
            <returns>The new directory name as a string.</returns>
        </member>
        <member name="M:DigitalProduction.IO.Path.ChangeDirectoryDotDot(System.String,System.Int32)">
            <summary>
            Alters a directory name (given as a string) in a manner that is similar to what the DOS 
            command "CD.." does to the current directory at the DOS prompt (gives the parent directory).
            </summary>
            <param name="directory">The starting directory as a string.</param>
            <param name="levels">Number of levels to move up.</param>
            <returns>The new directory name as a string.</returns>
        </member>
        <member name="M:DigitalProduction.IO.Path.DirectoryCopy(System.String,System.String)">
            <summary>
            Copies a directory from one location to another.  Does not copy subdirectories.
            </summary>
            <param name="sourcedirname">Path to the source directory.</param>
            <param name="destdirname">Path to the destination directory.</param>
        </member>
        <member name="M:DigitalProduction.IO.Path.DirectoryCopy(System.String,System.String,System.Boolean)">
            <summary>
            Copies a directory from one location to another.
            </summary>
            <param name="sourcedirname">Path to the source directory.</param>
            <param name="destdirname">Path to the destination directory.</param>
            <param name="copysubdirs">Specifies if the subdirectories should be copied.</param>
        </member>
        <member name="M:DigitalProduction.IO.Path.DirectoryCopy(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies a directory from one location to another.
            </summary>
            <param name="sourcedirname">Path to the source directory.</param>
            <param name="destdirname">Path to the destination directory.</param>
            <param name="copysubdirs">Specifies if the subdirectories should be copied.</param>
            <param name="overwrite">Overwrite existing files.</param>
        </member>
        <member name="M:DigitalProduction.IO.Path.DirectoryCopy(System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Copies a directory from one location to another.
            </summary>
            <param name="sourcedirname">Path to the source directory.</param>
            <param name="destdirname">Path to the destination directory.</param>
            <param name="copysubdirs">Specifies if the subdirectories should be copied.</param>
            <param name="overwrite">Overwrite existing files.</param>
            <param name="excludedfiles">A list of files not to copy.</param>
            <remarks>
            	Original code taken from the MSDN library.
            	url: http://msdn.microsoft.com/en-us/library/bb762914.aspx
            	Modified to provided additional functionality.
            </remarks>
        </member>
        <member name="M:DigitalProduction.IO.Path.DiskDriveType(System.String)">
            <summary>
            Returns the type of drive represented by the string.
            </summary>
            <param name="drive">String of the drive letter to get the type of drive of.</param>
            <returns>DriveType of the drive letter.</returns>
        </member>
        <member name="M:DigitalProduction.IO.Path.DiskDriveName(System.String)">
            <summary>
            Returns the volume name of a disk drive.
            </summary>
            <param name="drive">String of the drive letter to get the volume label of.</param>
            <returns>Volume label if found.</returns>
        </member>
        <member name="M:DigitalProduction.IO.Path.IsValidFileName(System.String)">
            <summary>
            Checks to insure that a file name passes the criteria to be valid.
            </summary>
            <param name="file">File name to check.</param>
            <returns>A ValidFileNameResult result that indicates if the file name is valid, or if not, what the error was.</returns>
        </member>
        <member name="M:DigitalProduction.IO.Path.IsValidFileName(System.String,DigitalProduction.IO.Path.ValidFileNameOptions)">
            <summary>
            Checks to insure that a file name passes the criteria to be valid.
            </summary>
            <param name="file">File name to check.</param>
            <param name="options">Options to controlling what determines if a file name is valid or not.</param>
            <returns>A ValidFileNameResult result that indicates if the file name is valid, or if not, what the error was.</returns>
        </member>
        <member name="T:DigitalProduction.IO.Path.ValidFileNameOptions">
            <summary>
            Options for controlling what determines if a file name is valid or not.
            </summary>
        </member>
        <member name="F:DigitalProduction.IO.Path.ValidFileNameOptions.RequirePathToExist">
            <summary>Specifies if the path is required to exist for the file name to be valid.  The default is false.</summary>
        </member>
        <member name="T:DigitalProduction.Generic.ObjectFactory`2">
            <summary>
            Summary description for ObjectFactory.
            </summary>
        </member>
        <member name="M:DigitalProduction.Generic.ObjectFactory`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.Generic.ObjectFactory`2.Register``1(`0)">
            <summary>
            Register a class with the object factory.
            </summary>
            <param name="key">Key used to retrieve the new object from.</param>
        </member>
        <member name="M:DigitalProduction.Generic.ObjectFactory`2.Register``1(`0,DigitalProduction.Generic.ObjectFactory{`0,`1}.CreateDelegate)">
            <summary>
            Register a class with the object factory.
            </summary>
            <param name="key">Key used to retrieve the new object from.</param>
            <param name="creator">CreateDelegate used to create the SpecificProduct.</param>
        </member>
        <member name="M:DigitalProduction.Generic.ObjectFactory`2.Create(`0)">
            <summary>
            Create a class associated with a given key.
            </summary>
            <param name="key">Key used to retrieve the new object from.</param>
            <returns>A new object.</returns>
        </member>
        <member name="M:DigitalProduction.Generic.ObjectFactory`2.GetArrayOfKeys">
            <summary>
            Get an array of keys.
            </summary>
            <returns>The array of keys.</returns>
        </member>
        <member name="M:DigitalProduction.Generic.ObjectFactory`2.GetListOfKeys">
            <summary>
            Get a list of keys.
            </summary>
            <returns>The list of keys.</returns>
        </member>
        <member name="M:DigitalProduction.Generic.ObjectFactory`2.Creator``1">
            <summary>
            Does the actual creation of a new object.
            </summary>
            <typeparam name="SpecificType">Subclass type to return.</typeparam>
            <returns>A new object (subclassed from GeneralProduct) of in the form of the super class (base class) type.</returns>
        </member>
        <member name="T:DigitalProduction.Generic.ObjectFactory`2.CreateDelegate">
            <summary>Create delegate.</summary>
        </member>
        <member name="T:DigitalProduction.Reflection.Assembly">
            <summary>
            Summary not provided for the class Assembly.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Location">
            <summary>
            Location of the executing assembly (including the name of the assembly).
            </summary>
            <remarks>This is the same as System.Reflection.Assembly.GetExecutingAssembly().Location.</remarks>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Location(System.Reflection.Assembly)">
            <summary>
            Location of the assembly (including the name of the assembly).
            </summary>
            <remarks>This is the same as System.Reflection.Assembly.GetExecutingAssembly().Location.</remarks>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Path">
            <summary>
            Path of the executing assembly (does not include the name of the assembly).
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Path(System.Reflection.Assembly)">
            <summary>
            Path of the assembly (does not include the name of the assembly).
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Title">
            <summary>
            Get the calling assembly's title.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Title(System.Reflection.Assembly)">
            <summary>
            Get the assembly title.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Version">
            <summary>
            Get the calling assembly's version.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Version(System.Reflection.Assembly)">
            <summary>
            Get the assembly version.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Description">
            <summary>
            Get the calling assembly's description.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Description(System.Reflection.Assembly)">
            <summary>
            Get the assembly description.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Product">
            <summary>
            Get the calling assembly's product name.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Product(System.Reflection.Assembly)">
            <summary>
            Get the assembly product name.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Copyright">
            <summary>
            Get the calling assembly's copyright.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Copyright(System.Reflection.Assembly)">
            <summary>
            Get the assembly copyright.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Company">
            <summary>
            Get the calling assembly's company.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.Company(System.Reflection.Assembly)">
            <summary>
            Get the assembly company.
            </summary>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.GetSubclassTypesOf(System.Type)">
            <summary>
            Get a List of Types that are subclasses of the superclass.  Searches the entire assembly the superclass is defined in.
            </summary>
            <param name="superclassType">Superclass/base class to search for subclass/derived class types for.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.GetConcreteSubclassTypesOf(System.Type)">
            <summary>
            Get a List of Types that are concrete (non-abstract) subclasses of the superclass.  Searches the entire assembly the superclass is defined in.
            </summary>
            <param name="superclassType">Superclass/base class to search for subclass/derived class types for.</param>
        </member>
        <member name="M:DigitalProduction.Reflection.Assembly.GetInterfaceImplementationsTypesOf(System.Type)">
            <summary>
            Get a List of Types that are implementations of the interface.  Searches the entire assembly the interface is defined in.
            </summary>
            <param name="superclassType">Interface to search for implementations of.</param>
        </member>
        <member name="P:DigitalProduction.Reflection.Assembly.LibraryLocation">
            <summary>
            Location of the library assembly (including the name of the library).
            </summary>
            <remarks>
            This is the same as System.Reflection.Assembly.GetExecutingAssembly().Location called from within the library.
            Note that this will NOT return the location of an executable that references this library.  To get that use
            the System version or use the Location() function in this library and provide the executables assembly as input.
            </remarks>
        </member>
        <member name="P:DigitalProduction.Reflection.Assembly.LibraryPath">
            <summary>
            Path of the library (does not include the name of the library).
            </summary>
            <remarks>
            If the library and any executable that calls it are installed in the same directory, this can be used
            as a shortcut to get the path of the running executable.
            </remarks>
        </member>
        <member name="T:DigitalProduction.RegistryEntryDelegate">
            <summary>
            Template for function to access the registry key.
            </summary>
        </member>
        <member name="T:DigitalProduction.RegistryEntry">
            <summary>
            Holds data associated with a registry function and a function that gets they key
            where the registry entry is stored.
            </summary>
        </member>
        <member name="F:DigitalProduction.RegistryEntry.RegKeyFunction">
            <summary>
            Function used to access registry key.
            </summary>
        </member>
        <member name="M:DigitalProduction.RegistryEntry.#ctor(DigitalProduction.RegistryEntryDelegate,System.String,System.Object)">
            <summary>
            Use constructor to assign name and key function, plus to simplify creation.
            </summary>
            <param name="keyfunction">
            A function of type RegistryEntryDelegate which returns the RegistryKey
            that the RegistryEntry is on.
            </param>
            <param name="name">Name of the RegistryEntry.  Used as the name of the RegistryValue.</param>
            <param name="val">Default value to use.</param>
        </member>
        <member name="P:DigitalProduction.RegistryEntry.Name">
            <value>
            Get or set name.
            </value>
        </member>
        <member name="P:DigitalProduction.RegistryEntry.Value">
            <value>
            Get or set a registry value.
            </value>
        </member>
        <member name="T:DigitalProduction.WinRegistry.FormPosition">
            <summary>
            Enumeration for the position of the form.
            </summary>
        </member>
        <member name="F:DigitalProduction.WinRegistry.FormPosition.Left">
            <summary>Position of left side of form.</summary>
        </member>
        <member name="F:DigitalProduction.WinRegistry.FormPosition.Top">
            <summary>Position of the top of the form.</summary>
        </member>
        <member name="F:DigitalProduction.WinRegistry.FormPosition.Width">
            <summary>Width of the form.</summary>
        </member>
        <member name="F:DigitalProduction.WinRegistry.FormPosition.Height">
            <summary>Height of the form.</summary>
        </member>
        <member name="T:DigitalProduction.WinRegistry.WinRegistryAccess">
            <summary>
            WinRegistryAccess Class. A generic registry access to read and write to a Windows registry.
            It does common tasks for all application, such as get the CompanyKey and the ApplicationKey.
            A specific application should derive it's own registry writer from this to save any other
            specific data.
            
            Note that the functions in this class cannot be static because most of them depend on the specific
            _owner of this instance.  Since this class is to be general enough to be used for all DPM applications
            the type of the owner is not know before hand.  Moreover, several instances of this class could
            exist at one time, each working for a different type of application.
            
            This class supports multiple levels of access to the registry.  That is, this class can be used
            to access a set of registry keys and values for a form that is owned by another form.  If this
            WinRegistryAccess has a parent it requests the AppKey from it's parent.  If that WinRegistryAccess
            has a parent it does the same, and so on.
            </summary>
        </member>
        <member name="F:DigitalProduction.WinRegistry.WinRegistryAccess._registryentries">
            <summary>
            Used to create a list of entries such that they can all be easily read or written at
            one time if needed.
            </summary>
        </member>
        <member name="F:DigitalProduction.WinRegistry.WinRegistryAccess._owner">
            <summary>
            Digital Production Management base Form.  This allows commonality amongst all DPM applications.
            </summary>
        </member>
        <member name="F:DigitalProduction.WinRegistry.WinRegistryAccess._owneraccess">
            <summary>
            This can be used if the form using this registry access is a child of another form.
            This enables drilling down many levels in the registry when dialogs have children dialogs.
            </summary>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.#ctor(DigitalProduction.Forms.DPMForm)">
            <summary>
            Constructor when the dialog box that is the owner is the top level dialog box.
            </summary>
            <param name="owner">DPMForm that is using this to access to the registry.</param>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.#ctor(DigitalProduction.Forms.DPMForm,DigitalProduction.WinRegistry.WinRegistryAccess)">
            <summary>
            Constructor to be used when the dialog box that is using this to access the registry
            is owned by another DPMForm.
            </summary>
            <param name="owner">DPMForm that is using this to access to the registry.</param>
            <param name="ownerregaccess">WinRegistryAccess used by the DPMForm that is the owner of the form using this WinRegistyrAccess.</param>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.Install">
            <summary>
            Install function used by the delegate to do installation work.  Primarily used for debugging a setup
            routine should handle normal installation.
            </summary>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.CreateRegistryEntries">
            <summary>
            Default creation of registy entries.  Derived classes should override this to
            create there own entries.
            </summary>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.WriteRegistryEntries">
            <summary>
            Write all the registry entries stored in the registry entries array list.
            </summary>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.ReadRegistryEntries">
            <summary>
            Read all the registry entries stored in the registry entries array list.
            </summary>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.GetRegEntry(System.Int32)">
            <summary>
            Get a registry entry from the array.
            </summary>
            <param name="index">index of the registry entry desired.</param>
            <returns>The registry entry associated with index if possible, otherwise null.</returns>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.GetValueAsBoolean(System.Int32)">
            <summary>
            Get a value from the registry entries stored in arraylist and return
            as a boolean.
            </summary>
            <param name="index">Index in arraylist that entry is stored at.</param>
            <returns>The value of the registry entry as a boolean.</returns>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.GetValueAsInt32(System.Int32)">
            <summary>
            Get a value from the registry entries stored in arraylist and return
            as an int.
            </summary>
            <param name="index">Index in arraylist that entry is stored at.</param>
            <returns>The value of the registry entry as an int.</returns>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.GetValueAsString(System.Int32)">
            <summary>
            Get a value from the registry entries stored in arraylist and return
            as a string.
            </summary>
            <param name="index">Index in arraylist that entry is stored at.</param>
            <returns>The value of the registry entry as a string.</returns>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.GetValueAsDouble(System.Int32)">
            <summary>
            Get a value from the registry entries stored in arraylist and return
            as a double.
            </summary>
            <param name="index">Index in arraylist that entry is stored at.</param>
            <returns>The value of the registry entry as a double.</returns>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.SetValue(System.Int32,System.Object)">
            <summary>
            Sets the value of a registry entry stored in the arraylist.
            </summary>
            <param name="index">Index in arraylist that entry is stored at.</param>
            <param name="setvalue">Value to set.</param>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.CompanyKey">
            <summary>
            Get the registry key associated with the company name.
            </summary>
            <returns>Returns the registry key if it could be accessed, null if an error occurs.</returns>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.AppKey">
            <summary>
            Get the registry key associated with the application name.
            </summary>
            <returns>Returns the registry key if it could be accessed, null if an error occurs.</returns>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.WindowStateKey">
            <summary>
            Return the key that holds window state information.
            </summary>
            <returns>Returns the registry key if it could be accessed, null if an error occurs.</returns>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.RecentFilesKey">
            <summary>
            Return the key that holds recently used files.
            </summary>
            <returns>Returns the registry key if it could be accessed, null if an error occurs.</returns>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.GetRecentlyUsedFiles(System.UInt32)">
            <summary>
            Gets the recently used files from the registry.
            </summary>
            <param name="numberoffiles">The number of strings to return.  If an entry is not found for a file, a blank string is returned.</param>
            <returns>An array of strings the size of "numberoffiles".  Blank strings are returned for any entries that do not exist.</returns>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.SetRecentlyUsedFiles(System.String[])">
            <value>
            Sets the the recently used menus from the registry.
            </value>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.GetValue(Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
            <summary>
            Get a registry value.
            </summary>
            <param name="key">Registry key that the value is located in.</param>
            <param name="valuename">Name of the value to get.</param>
            <param name="defaultvalue">Default value to use.</param>
            <returns>Returns the value stored in registry value if it exists, otherwise return the default value.</returns>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.GetValue(Microsoft.Win32.RegistryKey,System.String,System.Int32)">
            <summary>
            Get a registry value.
            </summary>
            <param name="key">Registry key that the value is located in.</param>
            <param name="valuename">Name of the value to get.</param>
            <param name="defaultvalue">Default value to use.</param>
            <returns>Returns the value stored in registry value if it exists, otherwise return the default value.</returns>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.GetValue(Microsoft.Win32.RegistryKey,System.String,System.Object)">
            <summary>
            Get a registry value.
            </summary>
            <param name="key">Registry key that the value is located in.</param>
            <param name="valuename">Name of the value to get.</param>
            <param name="defaultvalue">Default value to use.</param>
            <returns>Returns the value stored in registry value if it exists, otherwise return the default value.</returns>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.SetValue(Microsoft.Win32.RegistryKey,System.String,System.Object)">
            <summary>
            Set a registry value.
            </summary>
            <param name="key">Registry key that the value is located in.</param>
            <param name="valuename">Name of the value to get.</param>
            <param name="setvalue">Value to set the registry value to.</param>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.GetValue(Microsoft.Win32.RegistryKey,System.String,System.Double)">
            <summary>
            Get a registry value.
            </summary>
            <param name="key">Registry key that the value is located in.</param>
            <param name="valuename">Name of the value to get.</param>
            <param name="defaultvalue">Default value to use.</param>
            <returns>Returns the value stored in registry value if it exists, otherwise return the default value.</returns>
        </member>
        <member name="M:DigitalProduction.WinRegistry.WinRegistryAccess.GetValue(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Get a registry value.
            </summary>
            <param name="key">Registry key that the value is located in.</param>
            <param name="valuename">Name of the value to get.</param>
            <param name="defaultvalue">Default value to use.</param>
            <returns>Returns the value stored in registry value if it exists, otherwise return the default value.</returns>
        </member>
        <member name="P:DigitalProduction.WinRegistry.WinRegistryAccess.Owner">
            <summary>
            Get the owner of this registry access.
            </summary>
        </member>
        <member name="P:DigitalProduction.WinRegistry.WinRegistryAccess.OwnerRegAccess">
            <summary>
            Get the registry access of the owner if available.
            </summary>
        </member>
        <member name="P:DigitalProduction.WinRegistry.WinRegistryAccess.Installed">
            <value>
            Checks the registry key to see if the installed key has been set to true.  This
            is primarily used to check to see if Install needs to be run when doing debugging.
            </value>
        </member>
        <member name="P:DigitalProduction.WinRegistry.WinRegistryAccess.WindowPosition">
            <value>
            Gets or sets the window position information from the registry.  Takes an array of
            four integers which represent the left, top, width, and height of the window.
            </value>
        </member>
        <member name="P:DigitalProduction.WinRegistry.WinRegistryAccess.WindowState">
            <value>
            Gets or sets the window state information from the registry.
            </value>
        </member>
        <member name="P:DigitalProduction.WinRegistry.WinRegistryAccess.NumberOfRecentlyUsedFiles">
            <value>
            Gets or sets the size of the recently used menus from the registry.  This is the number of menu
            items dispalyed, not the number of menu items allowed.
            </value>
        </member>
        <member name="T:DigitalProduction.XML.Attribute">
            <summary>
            Summary not provided for the class Attribute.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.Attribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.Attribute.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.Attribute.Name">
            <summary>
            Name of the attribute.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.Attribute.Value">
            <summary>
            Value of the attribute.
            </summary>
        </member>
        <member name="T:DigitalProduction.XML.AttributeEnumerator">
            <summary>
            Summary not provided for the class AttributeEnumerator.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.AttributeEnumerator.#ctor(System.Collections.Generic.List{DigitalProduction.XML.Attribute})">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.AttributeEnumerator.System#Collections#IEnumerator#MoveNext">
            <summary>
            Move to the next entry.
            </summary>
            <returns>True is there is another entry, false otherwise.</returns>
        </member>
        <member name="M:DigitalProduction.XML.AttributeEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Reset to the beginning of the entries.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.AttributeEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Get the current entry.
            </summary>
        </member>
        <member name="T:DigitalProduction.XML.AttributeList">
            <summary>
            Summary not provided for the class AttributeList.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.AttributeList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.AttributeList.Add(DigitalProduction.XML.Attribute)">
            <summary>
            Add an Attribute.
            </summary>
            <param name="attribute">Attribute to add.</param>
        </member>
        <member name="M:DigitalProduction.XML.AttributeList.GetAttribute(System.Int32)">
            <summary>
            Get an attribute.
            </summary>
            <param name="number">Which Attribute to get.</param>
            <returns>The Attribute at position "number" if it exists, null otherwise.</returns>
        </member>
        <member name="M:DigitalProduction.XML.AttributeList.GetEnumerator">
            <summary>
            Get an enumerator.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:DigitalProduction.XML.AttributeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="P:DigitalProduction.XML.AttributeList.Count">
            <summary>
            Number of Attributes.
            </summary>
        </member>
        <member name="T:DigitalProduction.XML.Serialization.SerializableSortedList`2">
            <summary>
            Add serialization to a SortedList.
            
            From:
            Original dictionary version from:
            http://stackoverflow.com/questions/495647/serialize-class-containing-dictionary-member
            </summary>
            <typeparam name="KeyType">Dictionary key type.</typeparam>
            <typeparam name="ValueType">Dictionary value type.</typeparam>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableSortedList`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableSortedList`2.GetSchema">
            <summary>
            Get the schema.
            </summary>
            <returns>Null.  This object does not have a schema.</returns>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableSortedList`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Read XML.
            </summary>
            <param name="reader">XmlReader.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableSortedList`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Write XML.
            </summary>
            <param name="writer">XmlWriter.</param>
        </member>
        <member name="T:DigitalProduction.XML.IXMLPushReader">
            <summary>
            Provides an interface for creating classes that use the XMLTextProcessor to read xml files using a
            push model.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.IXMLPushReader.ReadXML(DigitalProduction.XML.XMLTextProcessor)">
            <summary>
            Read the element that this class corresponds to.
            </summary>
            <param name="xmlprocessor">XMLTextProcessor doing the reading.</param>
        </member>
        <member name="T:DigitalProduction.XML.Serialization.SerializableDictionary`2">
            <summary>
            Add serialization to a dictionary.
            
            From:
            http://stackoverflow.com/questions/495647/serialize-class-containing-dictionary-member
            </summary>
            <typeparam name="KeyType">Dictionary key type.</typeparam>
            <typeparam name="ValueType">Dictionary value type.</typeparam>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableDictionary`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableDictionary`2.GetSchema">
            <summary>
            Get the schema.
            </summary>
            <returns>Null.  This object does not have a schema.</returns>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Read XML.
            </summary>
            <param name="reader">XmlReader.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Write XML.
            </summary>
            <param name="writer">XmlWriter.</param>
        </member>
        <member name="T:DigitalProduction.XML.Serialization.SerializableKeyValuePair`2">
            <summary>
            Add serialization to a dictionary.
            
            From:
            http://stackoverflow.com/questions/495647/serialize-class-containing-dictionary-member
            </summary>
            <typeparam name="KeyType">Dictionary key type.</typeparam>
            <typeparam name="ValueType">Dictionary value type.</typeparam>
        </member>
        <member name="F:DigitalProduction.XML.Serialization.SerializableKeyValuePair`2.Key">
            <summary>Dictionary key.</summary>
        </member>
        <member name="F:DigitalProduction.XML.Serialization.SerializableKeyValuePair`2.Value">
            <summary>Dictionary value.</summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableKeyValuePair`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializableKeyValuePair`2.#ctor(`0,`1)">
            <summary>
            Constructor for initialzing values.
            </summary>
            <param name="key">Dictionary key.</param>
            <param name="value">Dictionary value.</param>
        </member>
        <member name="T:DigitalProduction.XML.Serialization.Serialization">
            <summary>
            Summary not provided for the class Serialization.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.Serialization.SerializeObject(DigitalProduction.XML.Serialization.SerializationSettings)">
            <summary>
            Serialize an object.
            </summary>
            <param name="settings">SerializationSettings to use for writing.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.Serialization.SerializeObject(System.Object,System.String)">
            <summary>
            Serialize an object.
            </summary>
            <param name="objectToSerialize">Object to serialize.</param>
            <param name="outputFile">Output file.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.Serialization.SerializeObjectFullEndElement(DigitalProduction.XML.Serialization.SerializationSettings)">
            <summary>
            Serialize an object using full end element closing tags.
            </summary>
            <param name="settings">SerializationSettings to use for writing.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.Serialization.SerializeObjectFullEndElement(System.Object,System.String)">
            <summary>
            Serialize an object.
            </summary>
            <param name="objectToSerialize">Object to serialize.</param>
            <param name="outputFile">Output file.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.Serialization.DeserializeObject``1(System.String)">
            <summary>
            Deserialize an object from a file.
            </summary>
            <typeparam name="T">Type of object to deserialize.</typeparam>
            <param name="file">File to deserialize from.</param>
        </member>
        <member name="T:DigitalProduction.XML.Serialization.SerializationSettings">
            <summary>
            Summary not provided for the class SerializationSettings.
            </summary>
        </member>
        <member name="F:DigitalProduction.XML.Serialization.SerializationSettings._serializeType">
            <summary>Type of the object to serialize.</summary>
        </member>
        <member name="F:DigitalProduction.XML.Serialization.SerializationSettings._serializeObject">
            <summary>Object to serialize.</summary>
        </member>
        <member name="F:DigitalProduction.XML.Serialization.SerializationSettings._outputFile">
            <summary>Name of the output file.</summary>
        </member>
        <member name="F:DigitalProduction.XML.Serialization.SerializationSettings._xmlSettings">
            <summary>Xml writer settings.</summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializationSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializationSettings.#ctor(System.Object,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="objectToSerialize">Object to serialize.</param>
            <param name="outputFile">Output file.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.SerializationSettings.CreateXmlWriterSettings">
            <summary>
            Creates the default XmlWriterSettings.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.Serialization.SerializationSettings.SerializeType">
            <summary>
            Type of the object to serialize.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.Serialization.SerializationSettings.SerializeObject">
            <summary>
            Object to serialize.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.Serialization.SerializationSettings.OutputFile">
            <summary>
            Name of the output file.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.Serialization.SerializationSettings.XmlSettings">
            <summary>
            Xml writer settings.
            </summary>
        </member>
        <member name="T:DigitalProduction.XML.Serialization.XmlTextWriterFullEndElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.XmlTextWriterFullEndElement.#ctor(System.IO.TextWriter)">
            <summary>
            Constructor.
            </summary>
            <param name="textWriter">TextWriter.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.XmlTextWriterFullEndElement.#ctor(System.String,System.Xml.XmlWriterSettings)">
            <summary>
            Constructor.
            </summary>
            <param name="filename">File (path) to write to.</param>
            <param name="settings">Settings to use for writing.</param>
        </member>
        <member name="M:DigitalProduction.XML.Serialization.XmlTextWriterFullEndElement.WriteEndElement">
            <summary>
            Override the writing of the end element to use the full end element (&lt;element&gt;&lt;/element&gt;) instead
            of the short method (&lt;element/&gt;);
            </summary>
        </member>
        <member name="T:DigitalProduction.XML.XMLHandler">
            <summary>
            An XML data handler.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandler.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandler.#ctor(DigitalProduction.XML.HandlerType,DigitalProduction.XML.XMLHandlerFunction)">
            <summary>
            Constructor.
            </summary>
            <param name="type">HandlerType of this handler.</param>
            <param name="elementhandler">Function which handles the element if its found.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandler.CompareTo(System.Object)">
            <summary>
            Implements the CompareTo method of the IComparable interface.
            </summary>
            <param name="obj">An object of type XMLHandler.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.  The return value 
            has these meanings:
            Less than zero: This instance is less than obj.
            Zero: This instance is equal to obj. 
            Greater than zero: This instance is greater than obj.
            </returns>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandler.Equals(System.Object)">
            <summary>
            Equivalent function used as a predicate to determine if this FileExtension is equivalent to a second.
            </summary>
            <param name="obj">XMLHandler to compare to.</param>
            <returns>True if equivalent, false otherwise.</returns>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandler.GetHashCode">
            <summary>
            Get a hash code.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="P:DigitalProduction.XML.XMLHandler.ElementName">
            <summary>
            Name of the element this, Handler handles.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.XMLHandler.Type">
            <summary>
            Handler type.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.XMLHandler.HandlerFunction">
            <summary>
            Callback function.
            </summary>
        </member>
        <member name="T:DigitalProduction.XML.XMLHandlerFunction">
            <summary>
            List of handlers for element.
            </summary>
        </member>
        <member name="T:DigitalProduction.XML.HandlerType">
            <summary>Type of handler.</summary>
        </member>
        <member name="F:DigitalProduction.XML.HandlerType.Start">
            <summary>First element in enumeration.  Used in loops to provide access to first element without hard coding element name.</summary>
        </member>
        <member name="F:DigitalProduction.XML.HandlerType.Element">
            <summary>Handles a specific element.</summary>
        </member>
        <member name="F:DigitalProduction.XML.HandlerType.Default">
            <summary>If a specific element handler is not specified for the read element, the default handler will be used.</summary>
        </member>
        <member name="F:DigitalProduction.XML.HandlerType.Text">
            <summary>Handles reading text between an element's start and end tags.</summary>
        </member>
        <member name="F:DigitalProduction.XML.HandlerType.None">
            <summary>Default.</summary>
        </member>
        <member name="F:DigitalProduction.XML.HandlerType.End">
            <summary>One past the last element in this enumeration list.</summary>
        </member>
        <member name="F:DigitalProduction.XML.HandlerType.Count">
            <summary>The number of enumerations in this enumeration list.</summary>
        </member>
        <member name="T:DigitalProduction.XML.XMLHandlerList">
            <summary>
            A list of handlers.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandlerList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandlerList.AddHandler(System.String,DigitalProduction.XML.XMLHandlerFunction)">
            <summary>
            Add an element handler.
            </summary>
            <param name="elementname">Name of the element to handle.</param>
            <param name="elementhandler">Function which handles the element if it is found.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandlerList.AddHandler(DigitalProduction.XML.HandlerType,DigitalProduction.XML.XMLHandlerFunction)">
            <summary>
            Add a handler of a specific type.
            </summary>
            <param name="type">HandlerType added.</param>
            <param name="elementhandler">Function which handles the element if its found.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandlerList.AddHandlers(DigitalProduction.XML.XMLHandlerList)">
            <summary>
            Add a list of handlers to this handler list.
            </summary>
            <param name="xmlhandlerlist">XMLHandlerList to add handlers from.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandlerList.ProcessElement(System.String,DigitalProduction.XML.XMLTextProcessor,System.Object)">
            <summary>
            See if the element has an associated handler.  If it does call the handler.
            </summary>
            <param name="elementname">Name of the element to look for.</param>
            <param name="xmlprocessor">XML processor that is doing the processing.</param>
            <param name="data">Optional data passed to the handler.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLHandlerList.Process(DigitalProduction.XML.HandlerType,DigitalProduction.XML.XMLTextProcessor,System.Object)">
            <summary>
            See if the element has an associated handler.  If it does call the handler.
            </summary>
            <param name="handler">The HandlerType to look for.</param>
            <param name="xmlprocessor">XML processor that is doing the processing.</param>
            <param name="data">Optional data passed to the handler.</param>
        </member>
        <member name="T:DigitalProduction.XML.XMLTextProcessor">
            <summary>
            Summary description for XMLTextProcessor.
            </summary>
        </member>
        <member name="F:DigitalProduction.XML.XMLTextProcessor._inputstream">
            <summary>Base stream that reads the file.</summary>
        </member>
        <member name="F:DigitalProduction.XML.XMLTextProcessor._xmlreader">
            <summary>XML reader that reads the file.</summary>
        </member>
        <member name="F:DigitalProduction.XML.XMLTextProcessor._topelement">
            <summary>The name of the top element.</summary>
        </member>
        <member name="F:DigitalProduction.XML.XMLTextProcessor._firstcall">
            <summary>Flag to indicate the first call to process.</summary>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="file">XML file to process.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="file">XML file to process.</param>
            <param name="topelement">Name of the top element in the file.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.Open(System.String)">
            <summary>
            Open the input and read up to the first element.
            </summary>
            <param name="file">XML file to process.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.Open(System.String,System.String)">
            <summary>
            Open the input and read up to the first element.
            </summary>
            <param name="file">XML file to process.</param>
            <param name="topelement">Name of the top element in the file.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.Close">
            <summary>
            Clean up in case of any errors.
            </summary>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.Process(DigitalProduction.XML.XMLHandlerList)">
            <summary>
            Process the body of the current element.
            </summary>
            <param name="handlers">
            An instance of XMLHandlerList which has the handlers for elements that this element contains.
            </param>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.Process(DigitalProduction.XML.XMLHandlerList,System.Object)">
            <summary>
            Process the body of the current element.
            </summary>
            <param name="handlers">
            An instance of XMLHandlerList which has the handlers for elements that this element contains.
            </param>
            <param name="data">Optional data passed to the handler.</param>
            <remarks>
            This function is really just a wrapper around the RunProcess which does the real work.  We just use this function
            to do the error handling.
            </remarks>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.RunProcess(DigitalProduction.XML.XMLHandlerList,System.Object)">
            <summary>
            Process the body of the current element.
            </summary>
            <param name="handlers">
            An instance of XMLHandlerList which has the handlers for elements that this element contains.
            </param>
            <param name="data">Optional data passed to the handler.</param>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetAttribute(System.String,System.Int32)">
            <summary>
            Read an attribute from the file and convert it to the indicated data type.
            </summary>
            <param name="name">Name of the attribute to read.</param>
            <param name="defaultvalue">Value to return if nothing is found or an error occurs.</param>
            <returns>
            Attribute converted to the indicated data type if possible, otherwise the default value.
            </returns>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetAttribute(System.String,System.Double)">
            <summary>
            Read an attribute from the file and convert it to the indicated data type.
            </summary>
            <param name="name">Name of the attribute to read.</param>
            <param name="defaultvalue">Value to return if nothing is found or an error occurs.</param>
            <returns>
            Attribute converted to the indicated data type if possible, otherwise the default value.
            </returns>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetAttribute(System.String,System.Boolean)">
            <summary>
            Read an attribute from the file and convert it to the indicated data type.
            </summary>
            <param name="name">Name of the attribute to read.</param>
            <param name="defaultvalue">Value to return if nothing is found or an error occurs.</param>
            <returns>
            Attribute converted to the indicated data type if possible, otherwise the default value.
            </returns>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetAttribute(System.String,System.String)">
            <summary>
            Read an attribute from the file and convert it to the indicated data type.
            </summary>
            <param name="name">Name of the attribute to read.</param>
            <param name="defaultvalue">Value to return if nothing is found or an error occurs.</param>
            <returns>
            Attribute converted to the indicated data type if possible, otherwise the default value.
            </returns>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetAttribute(System.String,System.Object)">
            <summary>
            Read an attribute from the file and convert it to the indicated data type.
            </summary>
            <param name="name">Name of the attribute to read.</param>
            <param name="defaultvalue">Value to return if nothing is found or an error occurs.</param>
            <returns>
            Attribute converted to the indicated data type if possible, otherwise the default value.
            </returns>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetAttributes">
            <summary>
            Extracts all the attributes as a name, value pair and moves to the next element.
            </summary>
            <returns>The attributes as a name, value pair.  The values are returned as strings.</returns>
            <remarks>
            This function moves to the next elements so if you want to do additional work with the attributes, do it first.
            </remarks>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetElementString(System.String)">
            <summary>
            Read the element data as a string.
            </summary>
            <returns>The element data.</returns>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetElementString(System.Int32)">
            <summary>
            Read the element data as the indicated type.
            </summary>
            <returns>The element data converted to the indicated type.</returns>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetElementString(System.Double)">
            <summary>
            Read the element data as the indicated type.
            </summary>
            <returns>The element data converted to the indicated type.</returns>
        </member>
        <member name="M:DigitalProduction.XML.XMLTextProcessor.GetElementString(System.Boolean)">
            <summary>
            Read the element data as the indicated type.
            </summary>
            <returns>The element data converted to the indicated type.</returns>
        </member>
        <member name="P:DigitalProduction.XML.XMLTextProcessor.FileStream">
            <summary>
            The base input stream used.  Read only.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.XMLTextProcessor.XmlTextReader">
            <summary>
            The text reader used.  Read only.
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.XMLTextProcessor.IsFileOpen">
            <summary>
            Is the XML file open for reading?
            </summary>
        </member>
        <member name="P:DigitalProduction.XML.XMLTextProcessor.ErrorInformation">
            <summary>
            Returns the information necessary to display a message to the user so that they can figure out what
            went wrong with their input file.  Read only.
            </summary>
        </member>
    </members>
</doc>
